#! /usr/bin/python

import os, glob, sys

baseName = 'continuous_excitation_synth'
libraryName='plugins_'+baseName

def scanFiles(pattern, paths) :
	files = []
	for path in paths :
		files+=glob.glob(os.path.join(path,pattern))
	return files

def recursiveDirs(root) :
	return filter( (lambda a : a.rfind( ".svn")==-1 ),  [ a[0] for a in os.walk(root)]  )

options = Variables('options.cache', ARGUMENTS)
options.Add(PathVariable('clam_prefix', 'The prefix where CLAM was installed', ''))
options.Add(PathVariable('prefix', 'Installation prefix (normally /usr, by default this is clam_prefix)', "", validator=PathVariable.PathAccept))
options.Add(BoolVariable('crossmingw', 'Using MinGW crosscompiler mode', 'no') )

toolChain = 'default'
if sys.platform == "win32": toolChain = 'mingw'
env = Environment(ENV=os.environ, tools=[toolChain], options=options)
options.Save('options.cache', env)
Help(options.GenerateHelpText(env))
env.SConsignFile() # Single signature file

CLAMInstallDir = env['clam_prefix']
InstallDir = env['prefix'] or env['clam_prefix']
clam_sconstoolspath = os.path.join(CLAMInstallDir,'share','clam','sconstools')
if env['crossmingw'] :
	env.Tool('crossmingw', toolpath=[clam_sconstoolspath])
env.Tool('clam', toolpath=[clam_sconstoolspath])
env.EnableClamModules([
	'clam_core',
	'clam_audioio',
	'clam_processing',
	] , CLAMInstallDir)

sourcePaths = recursiveDirs(".")
print sourcePaths
sources = glob.glob('*.cxx')
#sources += glob.glob('toreview/*.cxx')
extraPaths = [
	CLAMInstallDir+'/include',
	CLAMInstallDir+'/include/CLAM', # KLUDGE to keep old style includes
	".",
]

env.Append(CPPPATH=extraPaths)
sources = dict.fromkeys(sources).keys() # eliminate repeated
print sources

if sys.platform=='linux2' :
	env.Append( CCFLAGS=['-g','-O3','-Wall'] )
if sys.platform=="darwin" : #TODO fix. should be available in clamlibs pc
	env.Append( LIBPATH=['/opt/local/lib'] )
	env.Append( LIBS=['fftw3'] )
	
mainSources = {
	'ContinuousExcitationSynthesizer': 'ContinuousExcitationSynthesizer.cxx',
#	'TestAudioDatabaseReader': os.path.join('toreview','TestAudioDatabaseReader.cxx'),
#	'EbowSynthesizer': os.path.join('toreview','ebowSynthesizer.cxx'),
}
for binary, mainSource in mainSources.items() :
	sources.remove(mainSource)

programs = [ env.Program(target=program, source = [mainSource] + sources)
	for program, mainSource in mainSources.items()]

libraries = [
	env.SharedLibrary(target=libraryName, source = sources)
	]

examples = [
	'synth_with_osc.clamnetwork',
	'synth_with_sliders.clamnetwork',
	]

# TODO: Execute that command as part of the scons
# help2man -N -n 'OSC controlled synthesizer based on Spectral Modelling techniques' ./ContinuousExcitationSynthesizer > ContinuousExcitationSynthesizer.1
manpages = [ program+".1" for program in mainSources.keys() ]

install = [
	env.Install(os.path.join(InstallDir,'lib','clam'), libraries),
	env.Install(os.path.join(InstallDir,'bin'), programs),
	env.Install(os.path.join(InstallDir,'share','networkeditor','example-data'), examples),
	env.Install(os.path.join(InstallDir,'share','man','man1'), manpages),
	]
env.Alias('install', install)
env.Default(programs + libraries)

