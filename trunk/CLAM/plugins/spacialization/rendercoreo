#!/usr/bin/python

# INSTALL: ln -s bformat2binaural wavs  

# DONE milestone 1: multiple sources, fixed parameters (sample rate, origen, sequenced-controls), optional inputs DONE
# DONE milestone 2: output in b-format + 5.0 + binaural
# DONE milestone 3: configuragle networks.
# DONE milestone 4: warnings, output dirs. 
# DONE export IR histeresis distance to settings
# milestone 5: monitor duration of files and sequencer.

import os, sys
class config :
	acustica_path=os.environ['HOME']+'/acustica/'
	clam_path = os.environ['HOME']+'/clam/'

	inputGain = .7
	equivalent_hrtf_path = acustica_path+'bformat2binaural'
	enable_binaural = True
	enable_surround = True
	renderParams = { # parameters for the network template
		'path_file' : 'exported_coreo.data',
		'3Dmodel_file' : 'geometry.data',
		'controls_per_second' : 24,
		'grid_divisions': 500,
		}
	generalParams = {
		'video' : None
		}
	_video_extensions = [
			'*.flv',
		]
	import glob
	_all_videos = sum([glob.glob(ext) for ext in _video_extensions], [])
	if _all_videos :
		generalParams = {
			'video' : _all_videos[0]
			}

	import string
	sources = []
	if os.access("wav_relations.data", os.R_OK) :
		sources = [
			os.path.join('..','wavs', string.strip(line.split('\t')[0])) 
				for line in file('wav_relations.data')
			]
	if os.access("coreoconfig.py",os.R_OK) :
		execfile("coreoconfig.py")


def run(command) :
	print '\033[32m:: ', command, '\033[0m'
	result = os.system(command)
	if not result : sys.exit()
	return result
	for line in os.popen(command) :
		print line,
		sys.stdout.flush()
def norun(command) :
	print '\033[31mXX ', command, '\033[0m'

def assert_file_exists(file) :
	if not os.access(file, os.R_OK):
		print '\033[31mERROR: this file was expected but not found:', file, '\033[0m'
		sys.exit(-1)

generated_network_filename = 'generated.clamnetwork'
spacialization_path = os.path.join(config.clam_path,'CLAM','plugins','spacialization')
parametrized_network_filename = os.path.join(spacialization_path,
	'offline_networks','parametrized_on_the_fly_choreography.clamnetwork')
offlineplayer_bin = os.path.join(config.clam_path,'NetworkEditor','OfflinePlayer')

def write_parametrized_network(renderParams):
	content = file(parametrized_network_filename).read()
	file(generated_network_filename,'w').write(content % renderParams)

assert_file_exists(config.renderParams['path_file'])
assert_file_exists(config.renderParams['3Dmodel_file'])
for s in config.sources: assert_file_exists(s)



controlsCount = float(os.popen("wc -l "+config.renderParams['path_file']).read().split()[0])
totalTime = controlsCount / config.renderParams['controls_per_second']
print "TIME",totalTime

if config.enable_surround: run('rm -f *_surround.wav')
if config.enable_binaural: run('rm -f *_binaural.wav')
norun('rm -f *_bformat.wav')
for component in 'wxyz':
	run ('sox  -v 0.6 %s -r48000 E%s.wav rabbit' % (os.path.join(config.equivalent_hrtf_path,'E%s.wav'%component),component))


for i, source in enumerate(config.sources):
	basename = source.split('/')[-1][:-4]
	print 'Source %i: File: %s' % (i, basename)
	config.renderParams['source_index']=i
	run('sox -v %f "%s" "%s_normalized.wav"'%(config.inputGain, source, basename))
	write_parametrized_network(config.renderParams)
	run( '%s %s -t %f "%s_normalized.wav" W.wav X.wav Y.wav Z.wav' % 
		(offlineplayer_bin, generated_network_filename, totalTime, basename) )
	run('sox -M W.wav X.wav Y.wav Z.wav "%s_bformat.wav"' % basename)
	if config.enable_surround:
		run('%s %s/example-data/bformat2gformat.clamnetwork W.wav X.wav Y.wav l.wav r.wav sl.wav sr.wav c.wav' % (offlineplayer_bin, spacialization_path) )
		run('sox  -M l.wav r.wav sl.wav sr.wav c.wav "%s_surround.wav"' % basename)
	if config.enable_binaural:
		run( offlineplayer_bin + ' ' + os.path.join(config.acustica_path, 'bformat2binaural/bformat2binaural_0.84.clamnetwork') + ' W.wav X.wav Y.wav Z.wav lbinaural.wav rbinaural.wav' )
		run('sox -M  lbinaural.wav  rbinaural.wav  "%s_binaural.wav"' % basename)

if len(config.sources)<=1 : 
	run('cp *_binaural.wav binaural.wav')
	run('cp *_surround.wav surround.wav')
else :	
	run('sox -m *_binaural.wav binaural.wav')
	run('sox -m *_surround.wav surround.wav')

if config.generalParams.has_key('video') and config.generalParams['video']:
	video_path = config.generalParams['video']
	video_nopath = os.path.basename( config.generalParams['video'] )
	video_basename, video_ext = os.path.splitext(video_nopath)
	run('mencoder -ovc copy %s -audiofile binaural.wav -oac copy -o "%s_binaural%s"' % 
		(video_path, video_basename, video_ext)
		)
	# write demoing script.
	demoing_script = """#!/bin/bash
(mplayer "%s_binaural%s" -fs -loop 0 &) && mplayer surround.wav -ao jack -loop 0
""" % (video_basename, video_ext)
	file('play_surround.sh','w').write(demoing_script)
 	run('chmod +x play_surround.sh') #TODO do properly

#tear down
run('rm -f E?.wav')


