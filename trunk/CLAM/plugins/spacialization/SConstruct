#! /usr/bin/python

import os, glob, sys

libraryName='plugins_spacialization'

def scanFiles(pattern, paths) :
	files = []
	for path in paths :
		files+=glob.glob(os.path.join(path,pattern))
	return files

options = Variables('options.cache', ARGUMENTS)
options.Add(PathVariable('clam_prefix', 'The prefix where CLAM was installed', ''))
options.Add(PathVariable('prefix', 'Installation prefix (normally /usr, by default this is clam_prefix)', "", validator=PathVariable.PathAccept))
options.Add(PathVariable('sandbox_path', 'Path where third party libraries were installed (in windows)', "", validator=PathVariable.PathAccept))
options.Add(BoolVariable('crossmingw', 'Using MinGW crosscompiler mode', 'no') )
options.Add(EnumVariable('raytracing', 'Linking with Barcelona Media raytracing (not GPL)', 'disabled',
	allowed_values= ('convergent', 'traditional', 'disabled') ) )

toolChain = 'default'
if sys.platform == "win32": toolChain = 'mingw'
env = Environment(ENV=os.environ, tools=[toolChain], options=options)
options.Save('options.cache', env)
Help(options.GenerateHelpText(env))
env.SConsignFile() # Single signature file

CLAMInstallDir = env['clam_prefix']
InstallDir = env['prefix'] or env['clam_prefix']
clam_sconstoolspath = os.path.join(CLAMInstallDir,'share','clam','sconstools')
if env['crossmingw'] :
	env.Tool('crossmingw', toolpath=[clam_sconstoolspath])
env.Tool('clam', toolpath=[clam_sconstoolspath])
env.EnableClamModules([
	'clam_core',
	'clam_audioio',
	'clam_processing',
	] , CLAMInstallDir)

sourcePaths = ["src"]
sources = scanFiles('*.cxx', sourcePaths)
sources = dict.fromkeys(sources).keys()
if sys.platform=='linux2' :
	env.Append( CCFLAGS=['-g','-O3','-Wall'] )
	"""
	print "adding optimization flags"
	env.Append( CCFLAGS=[
		'-fomit-frame-pointer', 
		'-ffast-math',
		'-funroll-loops',
		'-mmmx',
#		'-march=nocona',
		'-msse',
		'-mfpmath=sse'
	]) """

if sys.platform=="darwin" : #TODO fix. should be available in clamlibs pc
	env.Append( LIBPATH=['/opt/local/lib'] )
	env.Append( LIBS='sndfile' )
if sys.platform=="win32" or 'crossmingw' in env['TOOLS'] :
	env.Append( LIBPATH=[os.path.join(env['sandbox_path'],'local','lib')] )
env.Append( LIBS=['fftw3'] )
env.AppendUnique(CPPPATH=sourcePaths)

if env['raytracing']=='traditional' or env['raytracing']=='convergent':
	print 'linking with raytracing'
	env.Append(CPPPATH=[os.path.join('..','..','..','..','acustica','raytracing')])
	env.Append(LIBPATH=[os.path.join('..','..','..','..','acustica','raytracing')])
	env.Append(LIBS=['raytracing',"GL","GLU","lo"])
else :
	sources.remove(os.path.join('src','RoomImpulseResponseSimulator.cxx'))

libraries = [
	env.SharedLibrary(target=libraryName, source = sources),
#	env.SharedLibrary(target="clam_plugins", source = sources+['ladspa/clam_plugin.cxx'], SHLIBPREFIX=''),
	]

tests = [
	env.Program("UnitTests", scanFiles("*.cxx", ['tests'])),
	]
# TODO: This is a hack until LD_LIBRARY_PATH environment is nicely propagated
ld_library_path = ""
if env['ENV'].has_key("LD_LIBRARY_PATH") :
	ld_library_path = "LD_LIBRARY_PATH=%s "%env['ENV']['LD_LIBRARY_PATH']

runTests = Command("UnitTests.passed",tests, "%s ./UnitTests"%ld_library_path)

examples = scanFiles('*.clamnetwork', ['example-data'])
examples+= scanFiles('*.ui', ['example-data'])

install = [
	env.Install(os.path.join(InstallDir,'lib','clam'), libraries),
#	env.Install(os.path.join(InstallDir,'share','networkeditor','example-data'), examples)
	]

env.Alias('install', install)
env.Alias('tests', runTests)
env.Default(libraries)


