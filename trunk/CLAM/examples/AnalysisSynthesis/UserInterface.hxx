// generated by Fast Light User Interface Designer (fluid) version 1.0011

#ifndef UserInterface_hxx
#define UserInterface_hxx
#include <FL/Fl.H>
#include <FL/Fl_Double_Window.H>
#include <FL/Fl_Box.H>
#include <FL/Fl_Button.H>
#include <FL/Fl_Input.H>

class UserInterface {
public:
  public: class AnalysisSynthesisExampleGUI* mAnalysisSynthesisExample;
  UserInterface();
  Fl_Double_Window *mWindow;
  Fl_Button *mLoadConfigurationButton;
private:
  inline void cb_mLoadConfigurationButton_i(Fl_Button*, void*);
  static void cb_mLoadConfigurationButton(Fl_Button*, void*);
public:
  Fl_Input *mConfigurationText;
  Fl_Button *mDisplayInputSoundButton;
private:
  inline void cb_mDisplayInputSoundButton_i(Fl_Button*, void*);
  static void cb_mDisplayInputSoundButton(Fl_Button*, void*);
public:
  Fl_Input *mInputSoundText;
  Fl_Button *mAnalyzeButton;
private:
  inline void cb_mAnalyzeButton_i(Fl_Button*, void*);
  static void cb_mAnalyzeButton(Fl_Button*, void*);
public:
  Fl_Button *mLoadAnalysisDataButton;
private:
  inline void cb_mLoadAnalysisDataButton_i(Fl_Button*, void*);
  static void cb_mLoadAnalysisDataButton(Fl_Button*, void*);
public:
  Fl_Button *mStoreAnalysisDataButton;
private:
  inline void cb_mStoreAnalysisDataButton_i(Fl_Button*, void*);
  static void cb_mStoreAnalysisDataButton(Fl_Button*, void*);
public:
  Fl_Input *mAnalysisDataText;
  Fl_Button *mLoadTransformationButton;
private:
  inline void cb_mLoadTransformationButton_i(Fl_Button*, void*);
  static void cb_mLoadTransformationButton(Fl_Button*, void*);
public:
  Fl_Button *mTransformButton;
private:
  inline void cb_mTransformButton_i(Fl_Button*, void*);
  static void cb_mTransformButton(Fl_Button*, void*);
public:
  Fl_Input *mTransformationFileText;
  Fl_Button *mAnalyzeMelodyButton;
private:
  inline void cb_mAnalyzeMelodyButton_i(Fl_Button*, void*);
  static void cb_mAnalyzeMelodyButton(Fl_Button*, void*);
public:
  Fl_Button *mStoreMelodyButton;
private:
  inline void cb_mStoreMelodyButton_i(Fl_Button*, void*);
  static void cb_mStoreMelodyButton(Fl_Button*, void*);
public:
  Fl_Input *mMelodyFileText;
  Fl_Button *mSynthesizeButton;
private:
  inline void cb_mSynthesizeButton_i(Fl_Button*, void*);
  static void cb_mSynthesizeButton(Fl_Button*, void*);
public:
  Fl_Button *mStoreOutputSoundButton;
private:
  inline void cb_mStoreOutputSoundButton_i(Fl_Button*, void*);
  static void cb_mStoreOutputSoundButton(Fl_Button*, void*);
public:
  Fl_Button *mDisplayOutputSoundButton;
private:
  inline void cb_mDisplayOutputSoundButton_i(Fl_Button*, void*);
  static void cb_mDisplayOutputSoundButton(Fl_Button*, void*);
public:
  Fl_Input *mOutputSoundText;
  Fl_Button *mStoreOutputSoundSinusoidalButton;
private:
  inline void cb_mStoreOutputSoundSinusoidalButton_i(Fl_Button*, void*);
  static void cb_mStoreOutputSoundSinusoidalButton(Fl_Button*, void*);
public:
  Fl_Button *mDisplayOutputSoundSinusoidalButton;
private:
  inline void cb_mDisplayOutputSoundSinusoidalButton_i(Fl_Button*, void*);
  static void cb_mDisplayOutputSoundSinusoidalButton(Fl_Button*, void*);
public:
  Fl_Input *mOutputSoundSinusoidalText;
  Fl_Button *mStoreOutputSoundResidualButton;
private:
  inline void cb_mStoreOutputSoundResidualButton_i(Fl_Button*, void*);
  static void cb_mStoreOutputSoundResidualButton(Fl_Button*, void*);
public:
  Fl_Button *mDisplayOutputSoundResidualButton;
private:
  inline void cb_mDisplayOutputSoundResidualButton_i(Fl_Button*, void*);
  static void cb_mDisplayOutputSoundResidualButton(Fl_Button*, void*);
public:
  Fl_Input *mOutputSoundResidualText;
  Fl_Button *mExitButton;
private:
  inline void cb_mExitButton_i(Fl_Button*, void*);
  static void cb_mExitButton(Fl_Button*, void*);
  void LoadConfiguration(void);
  void DisplayInputSound(void);
  void Analyze(void);
  void LoadAnalysisData(void);
  void StoreAnalysisData(void);
  void Synthesize(void);
  void AnalyzeMelody(void);
  void StoreMelody(void);
  void StoreOutputSoundResidual(void);
  void DisplayOutputSoundResidual(void);
  void StoreOutputSoundSinusoidal(void);
  void DisplayOutputSoundSinusoidal(void);
  void LoadTransformation(void);
  void Transform(void);
  void Exit(void);
};
#endif
