== Instructions ==

Note: By now only tested in linux, but all the tools are cross-platform and should also work in mac and windows in a similar way.

=== Tools (assuming a working clam dev environment) ===
# Install Boost.Python, packages named libboost-python-dev and libboost-python1.34.1
# Download and install[1] Py++ (no package at least for ubuntu repos)
  'sudo python setup.py install'
  Py++-0.9.5.zip at https://sourceforge.net/project/showfiles.php?group_id=118209&package_id=157697
##* Enable indexing suite version v2:
    PYPLUSPLUS='Py++-0.9.5/indexing_suite_v2/indexing'
    BOOST_INDEXING='/usr/include/boost/python/suite/indexing'
    sudo cp $PYPLUSPLUS/* $BOOST_INDEXING/
# (optional [1]) Get gccxml version 0.9 (Warning: standard debian package at repos usually is about 0.7). I took from here:  http://ftp.zcu.cz/pub/linux/debian/pool/main/g/gccxml/gccxml_0.9.0+cvs20080525-1_i386.deb or compile from CVS.
# (optional [1]) Download and install pygccxml[1] (no package at least for ubuntu repos):
  'sudo python setup.py install'
  pygccxml-0.9.5.zip: http://sourceforge.net/project/showfiles.php?group_id=118209&package_id=146545

[1] Only needed for bindings regeneration. Not for compiling.


=== Compilation ===
# Run 'scons configure prefix=CLAM_LIBRARY_PATH' to specify desired CLAM library installation prefix ('/usr/local' by default).
# Apply the pyhacks.patch to the CLAM include directory in order to allow some hacked features. Is temporay, just for testing purposes!
# Run 'generate_binding.py' (will generate a bunch of files at 'src' directory) and then compile the bindings with 'scons' command. After those steps you should get the clam.so ready to use.


=== Use ===
* Just import the library as usual: 'import clam'.
* Try the examples at examples directory (fft_example.py, playfile.py, etc).
* Play interactively with the library from a console with IPython.
