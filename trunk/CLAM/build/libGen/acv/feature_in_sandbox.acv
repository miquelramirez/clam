#####################################################################
# Look for $$feature in the sandbox
#
# source: $$filename 
#####################################################################
if test x$enabled_$$feature_esc = xyes
    then
    AC_MSG_CHECKING([$$feature in sandbox])
    if test x$sandbox_location = x
	then
	if test x$enabled_sandbox = xno
	    then
	    AC_MSG_RESULT([no - sandbox disabled])	
	else
	    AC_MSG_RESULT([no - sandbox not found])	
	fi
    else
	AC_MSG_RESULT([searching headers])	
	if test x$found_$$feature_esc = xno
	    then
	    found=1
	    for file in $$headers{$$feature}
	      do
	      AC_MSG_CHECKING([$file for $$feature in sandbox])
	      if test -r $sandbox_location/$$sandbox{$$feature}/include/$file
		  then
		  AC_MSG_RESULT([yes])
		  include_dirs_$$feature_esc="$sandbox_location/$$sandbox{$$feature}/include"
	      else
		  AC_MSG_RESULT([no])
		  found=0
	      fi
	    done
	    AC_MSG_CHECKING([[$$feature header(s) found in sandbox]])
	    if test $found = 1
		then
		AC_MSG_RESULT([yes])
		sep=""
		found=1
		for file in $$libs{$$feature}
		  do
		  AC_MSG_CHECKING([lib$file for $$feature in sandbox])
		  if test -r $sandbox_location/$$sandbox{$$feature}/lib/lib$file.$dllext
		      then
		      AC_MSG_RESULT([yes])
		      libs_$$feature_esc="libs_$$feature_esc$sep$file"
		      sep=" "
		  else
		      AC_MSG_RESULT([no])
		      found=0
		  fi
		done
		AC_MSG_CHECKING([[$$feature lib(s) found in sandbox]])
		if test $found = 1
		    then
		    AC_MSG_RESULT([yes])
		    found_$$feature_esc=yes
		else
		    AC_MSG_RESULT([no])
		    found_$$feature_esc=no
		fi
	    else
		AC_MSG_RESULT([no])
		found_$$feature_esc=no
	    fi
	fi
    fi
fi
#####################################################################

