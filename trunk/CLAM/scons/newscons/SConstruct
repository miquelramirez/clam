#!/usr/bin/python

import os, sys

def die(message) :
	print >> sys.stderr, message
	sys.exit()

def diffList(list1, list2) :
	print list2.__class__.__name__
	if isinstance(list2, list) : return [ item for item in list2 if item not in list1 ]
	return list2

def diffDict(dict1, dict2) :
	return dict((
		(key,value) if key not in dict1.keys() else (key,diffList(dict1[key], value))
		for key, value in dict2.items()
		if value!=dict1.get(key,None)
		and key in "CPPDEFINES LIBS LINKFLAGS CPPPATH CPPFLAGS CFLAGS".split()
		))

modules = [
	os.path.dirname(path)
	for path in Glob('*/SConscript', strings=True) ]

# Collecting module information
import collections
Module = collections.namedtuple("Module",
	"Dependencies CustomTests Configure Variables Targets")
Export("Module")
sconfs = dict([
	(module, SConscript(os.path.join(module, "SConscript")))
	for module in modules ])

# Collecting module variables
variables = Variables(".options.cache", ARGUMENTS)
variables.AddVariables(
	BoolVariable(
		"verbose",
		help = "Print build commands instead a short description",
		default=True,
		),
	PathVariable(
		"prefix",
		help = "Installation prefix",
		default='/usr/local',
		),
	)
for name, sconf in sconfs.items() :
	variables.AddVariables(*sconf.Variables)

# Setting up common environment
env = Environment(tools=["default"], ENV=os.environ, variables=variables)
Help(variables.GenerateHelpText(env))
variables.Save(".options.cache", env)
env.Tool("pkgconfig", toolpath=["."])
env.Tool("clam", toolpath=["."])

env.moveIntermediateInto("generated")
env.activateColorCommandLine()
env.ClamQuietCompilation()

clone = env.Clone()

config = env.Configure()
config.AddTests(env.PkgConfigConfigureChecks())
# Adding tests
for name, sconf in sconfs.items() :
	config.AddTests(sconf.CustomTests())

# Actually configuring
config.CheckPkgConfigProgram() or die(
	"pkg-config is required")
config.CheckPkgConfigProgram(minimum_version="0.22") or die(
	"pkg-config is too old")

for name, sconf in sconfs.items() :
	sconf.Configure(config)

config.Finish()
#print diffDict(clone.Dictionary(), env.Dictionary() )

buildTargets = []
installTargets = []

installTargets, buildTargets = [list(x) for x in zip(*[list(sconf.Targets(env)) for name, sconf in sconfs.items()])]

program = env.Program("myprogram", ["a.cxx"])
buildTargets.append(program)

env.Command("uninstall", [], [ Delete(file) for file in FindInstalledFiles()])
Alias("install", installTargets)
Default(buildTargets)



