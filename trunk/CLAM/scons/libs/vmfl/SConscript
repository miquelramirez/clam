# SConstruct file for CLAM vmfl
from buildtools import *
from buildtools.pkggen import PackageData
from buildtools.file_retriever import FileRetriever
import os, sys

print """\
####################################################################
### BOOTSTRAPPING CLAM FLTK-BASED VISUALIZATION MODULE LIBRARY   ###
####################################################################"""

Import('vmfl_env version top install_dirs header_db')

print "Creating pkg-config descriptor...",
pkg_data = PackageData( 'clam_vmfl', version, [] )
pkg_data.create_pkg_descriptor( vmfl_env, 'clam_vmfl.pc' )
print "ok"

print "Gathering necessary source files...",
if not os.path.exists('src') :
	os.mkdir('src')
if not os.path.exists('include' ) :
	os.makedirs('include/CLAM')

folders = ['src/Visualization/Base','src/Visualization/GL', 'src/Visualization/Plot', 'src/Visualization/Presentation/Base' ,'src/Visualization/Presentation/FLTK', 'src/Visualization/Util', 'src/Visualization/View', 'src/Visualization/Widget/FLTKWrapper.*xx', 'src/Visualization/Widget/FLTK' ]

blacklist = ['GLLogPowSpRenderer','GLLogSpRenderer','ProcessingController','Fl_Range']

file_retriever = FileRetriever( top+'/..', folders, blacklist )

file_retriever.scan()

store_headers_in_db( header_db )

print "ok"
vmfl_env.Append(CPPPATH=['include/CLAM','../core/include/CLAM','../processing/include/CLAM','../audioio/include/CLAM'])
vmfl_env.Append(CCFLAGS='-include %s'%vmfl_env['preinclude'])
vmfl_env.Append(LIBS=['clam_core','clam_processing','clam_audioio'])
vmfl_env.Append(LIBPATH=['../core','../processing','../audioio'])

vmfl_env.SharedLibrary( 'clam_vmfl', file_retriever.sources )

