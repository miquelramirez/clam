# SConstruct file for CLAM vmfl
from buildtools import *
from buildtools.include_rename import *
from buildtools.pkggen import PackageData
from buildtools.file_retriever import FileRetriever
from buildtools.rulesets import *

from buildtools.custom_builders import *

import os, sys
Import('vmfl_env version top install_dirs header_db')

def define_module_contents() :
	if not os.path.exists('src') :
		os.mkdir('src')
	if not os.path.exists('include' ) :
		os.makedirs('include/CLAM')

	folders = ['src/Visualization/GL', 'src/Visualization/Plot', 'src/Visualization/Presentation/Base', 'src/Visualization/Presentation/FLTK', 'src/Visualization/Widget/FLTKWrapper.*xx', 'src/Visualization/Widget/FLTK', 'GUIAudioApplication.*xx', 'src/Visualization/Base/WidgetTKWrapper.*xx', 'src/Visualization/Util/FileChooser.*xx', 'src/Visualization/Util/MessageBox.*xx', 'src/Visualization/View/FLTKConfigurator.*xx','src/Visualization/Base/SupportedToolkits.*xx']

	blacklist = ['GLLogPowSpRenderer','GLLogSpRenderer','ProcessingController','Fl_Range','FDFilterController','TokenDelayController','HugeArrayRenderer']

	file_retriever = FileRetriever( top+'/..', folders, blacklist )
	
	file_retriever.scan_without_copy()

	builderCopy = Builder( action=Action(generate_copy_files,generate_copy_files_message) )
	vmfl_env.Append( BUILDERS={'CopyFileAndUpdateIncludes' : builderCopy} )	

	realHeaders = []
	for orig,target in file_retriever.origTargetHeaders :
		vmfl_env.CopyFileAndUpdateIncludes(target, orig)
		realHeaders.append(target)


	realSources = []
	for orig,target in file_retriever.origTargetSources:
		vmfl_env.CopyFileAndUpdateIncludes(target,orig)
		realSources.append(target)


	manifest = Manifest()
	manifest.store( realHeaders, realSources )
	return realHeaders, realSources

# Module task and depedencies definition

if not vmfl_env.GetOption('clean') :
	pkg_data = PackageData( 'clam_vmfl', version, [] )
	pkg_data.create_pkg_descriptor( vmfl_env, 'clam_vmfl.pc' )

realHeaders, realSources = define_module_contents()

vmfl_env.Prepend(CPPPATH=['include','../core/include','../processing/include','../audioio/include'])
vmfl_env.Append(LIBS=['clam_core', 'clam_processing','clam_audioio'])

#if sys.platform == 'win32' : 
#	vmfl_env.Append( LIBS=['clam_core_templates'] )

vmfl_env.Prepend(LIBPATH=['../core','../processing','../audioio'])

if sys.platform != 'win32' :
	vmfl_target, vmfl_install_target = posix_lib_rules( 'vmfl', version, realHeaders, realSources, install_dirs, vmfl_env )
else :
	vmfl_target, vmfl_install_target = win32_lib_rules( 'vmfl', version, realHeaders, realSources, install_dirs, vmfl_env )


Return( 'vmfl_target', 'vmfl_install_target' )
