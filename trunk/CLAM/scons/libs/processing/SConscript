# SConstruct file for CLAMprocessing
from buildtools import *
from buildtools.include_rename import *
from buildtools.pkggen import PackageData
from buildtools.file_retriever import FileRetriever
from buildtools.rulesets import *
from buildtools.custom_builders import *
import os, sys

Import('processing_env version top install_dirs header_db')


def define_module_contents() :
	if not os.path.exists('src') :
		os.mkdir('src')
	if not os.path.exists('include' ) :
		os.makedirs('include/CLAM')

	folders = ['src/Data/BasicProcessing','src/Data/Descriptors','src/Data/Descriptors/Melody', 'src/Processing/Analysis', 'src/Processing/ArithOps', 'src/Processing/Generators/', 'src/Processing/Synthesis', 'src/Processing/Transformations', 'externals/numrec', 'src/Processing/SDIFIO', 'src/Tools/SDIF','src/Processing/Default*.*xx', 'src/Processing/SMS*.*xx', 'src/Standard/ScaleCnv.*','src/Processing/Transformations/SMS', 'src/Processing/Controls', 'src/Processing/Base/NullProcessingConfig.hxx', 'src/Visualization/Base', 'src/Visualization/View', 'src/Visualization/Util' ]

	if sys.platform == 'win32':
		folders.append('src/Processing/InitProcessing*.*xx')

	blacklist = ['GT_FilterBank','OnsetDetector',r'Audio\..+' , 'FileChooser', 'MessageBox', 'FLTKConfigurator', 'WidgetTKWrapper', 'FDFilterController', 'SupportedToolkits']

	if not processing_env.has_key('with_osc_support') or processing_env['with_osc_support'] == False :
		blacklist.append('OSCSender')

	if not processing_env.has_key('with_fftw') or processing_env['with_fftw'] == False :
		blacklist.append('.+rfftw.+')
	if not processing_env.has_key('with_nr_fft') or processing_env['with_nr_fft'] == False :
		blacklist.append('.*numrecipes.+')
		blacklist.append('.+numrec.+')
	
	file_retriever = FileRetriever( top+'/..', folders, blacklist )

	file_retriever.scan_without_copy()

	builderCopy = Builder( action=Action(generate_copy_files,generate_copy_files_message) )
	processing_env.Append( BUILDERS={'CopyFileAndUpdateIncludes' : builderCopy} )	

	realHeaders = []
	for orig,target in file_retriever.origTargetHeaders :
		processing_env.CopyFileAndUpdateIncludes(target, orig)
		realHeaders.append(target)


	realSources = []
	for orig,target in file_retriever.origTargetSources:
		processing_env.CopyFileAndUpdateIncludes(target,orig)
		realSources.append(target)

	manifest = Manifest()
	manifest.store( realHeaders, realSources )
	return realHeaders, realSources

# Module dependencies and tasks

if not processing_env.GetOption('clean') :

	pkg_data = PackageData( 'clam_processing', version, [] )
	pkg_data.create_pkg_descriptor( processing_env, 'clam_processing.pc' )

realHeaders, realSources = define_module_contents()

processing_env.Prepend(CPPPATH=['include','../core/include'])
processing_env.Append(LIBS=['clam_core'])
processing_env.Prepend(LIBPATH=['../core'])

if sys.platform != 'win32' :
	processing_tgt, processing_install_tgt = posix_lib_rules( 'processing', version, realHeaders, realSources, install_dirs, processing_env )
else :
	processing_tgt, processing_install_tgt = win32_lib_rules( 'processing', version, realHeaders, realSources, install_dirs, processing_env )

Return( 'processing_tgt', 'processing_install_tgt' )
