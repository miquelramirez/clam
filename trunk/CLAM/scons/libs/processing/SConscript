#!/usr/bin/python
# SConstruct file for CLAMprocessing
from buildtools import *
from buildtools.include_rename import *
from buildtools.file_retriever import FileRetriever
from buildtools.rulesets import *

from buildtools.custom_builders import *

import os, sys

Import('processing_env version top install_dirs header_db')

def define_module_contents(env) :
	if not os.path.exists('src') :
		os.mkdir('src')
	if not os.path.exists('include' ) :
		os.makedirs('include/CLAM')

	folders = [
		'src/Data/BasicProcessing',
		'src/Data/Descriptors',
		'src/Data/Descriptors/Melody',
		'src/Processing/Analysis',
		'src/Processing/ArithOps',
		'src/Processing/Generators/',
		'src/Processing/Synthesis',
		'src/Processing/Transformations',
		'externals/numrec',
		'src/Processing/SDIFIO',
		'src/Tools/SDIF',
		'src/Processing/Default*.*xx',
		'src/Processing/SMS*.*xx',
		'src/Standard/ScaleCnv.*',
		'src/Processing/Transformations/SMS',
		'src/Processing/Transformations/Spectral',
		'src/Processing/Controls',
		'src/Processing/Base/NullProcessingConfig.hxx',
		'src/Visualization/Base',
		'src/Visualization/View',
		'src/Visualization/Util',
		]

	if sys.platform == 'win32':
		folders.append('src/Processing/InitProcessing*.*xx')

	blacklist = [
		'GT_FilterBank',
		'OnsetDetector',
		r'Audio\..+' ,
		'FileChooser',
		'MessageBox',
		'FLTKConfigurator',
		'QTConfigurator',
		'WidgetTKWrapper',
		'FDFilterController',
		'SupportedToolkits',
		]

	if not processing_env.has_key('with_osc_support') or env['with_osc_support'] == False :
		blacklist.append('OSCSender')

	if not env.has_key('with_fftw') or env['with_fftw'] == False :
		blacklist.append('.+rfftw.+')
	if not env.has_key('with_nr_fft') or env['with_nr_fft'] == False :
		blacklist.append('.*numrecipes.+')
		blacklist.append('.+numrec.+')
	
	file_retriever = FileRetriever( top+'/..', folders, blacklist )

	file_retriever.scan_without_copy()

	builderCopy = Builder( action=Action(generate_copy_files,generate_copy_files_message) )
	env.Append( BUILDERS={'CopyFileAndUpdateIncludes' : builderCopy} )	

	realHeaders = []
	for orig,target in file_retriever.origTargetHeaders :
		env.CopyFileAndUpdateIncludes(target, orig)
		realHeaders.append(target)


	realSources = []
	for orig,target in file_retriever.origTargetSources:
		env.CopyFileAndUpdateIncludes(target,orig)
		realSources.append(target)

	return realHeaders, realSources

realHeaders, realSources = define_module_contents(processing_env)

moduleDependencies = ['core']

lib_tgt, install_tgt = lib_rules( 'processing', version, realHeaders, realSources, install_dirs, processing_env, moduleDependencies )

Return( 'lib_tgt', 'install_tgt' )
