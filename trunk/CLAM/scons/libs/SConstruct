from buildtools import *
from buildtools.thorough_check import ThoroughPackageCheck
from buildtools.tool_checks import *
from buildtools.package_checks import *
from buildtools.generic_checks import * 

# helper functions
def setup_build_options( env ) :
	# configuration options:
	opts = Options('clam.conf')
	
	opts.Add( PathOption( 'prefix', 'Directory to install under', '/usr'))
	opts.Add( BoolOption( 'release', 'Build CLAM using optimization and stripping debug symbols', 'yes'))
	opts.Add( BoolOption( 'double', 'CLAM TData type will be double','no'))
	opts.Add( BoolOption( 'sandbox', 'Presence of libraries in the CLAM sandbox will have preference', 'yes'))
	opts.Add( BoolOption( 'checks', 'Postcondition checks enabled', 'no' ) )
	opts.Add( BoolOption( 'release_asserts', 'CLAM asserts will be triggered on release builds', 'no'))
	
	opts.Add( EnumOption( 'xmlbackend', 'XML passivation backend', 'xercesc', ('xercesc','xmlpp','none')) )
	#opts.Add( BoolOption( 'with_fftw', 'Selects whether to use fftw or not', 'yes'))
	
	opts.Update(env)
	opts.Save('clam.conf', env) # Save, so user doesn't have to 
				  				# specify PREFIX every time

	Help(opts.GenerateHelpText(env))

def make_install_dirnames( env ) :
	install_prefix = env['prefix']
	install_lib    = env['prefix']+'/lib'
	install_bin    = env['prefix']+'/bin'
	install_inc    = env['prefix']+'/include'
	install_data   = env['prefix']+'/share'
	Export('install_prefix install_lib install_bin install_inc install_data')
	print """\
#############################################
### INSTALL DIRECTORY INFORMATION         ###
#############################################"""
	print "Directory to install under:", install_prefix
	print "\tLibrary files will be installed at:", install_lib
	print "\tExecutable files will be installed at:", install_bin
	print "\tInclude files will be installed at:", install_inc
	print "\tDocumentation, data and examples will be installed at:", install_data


def setup_global_environment( clam_env, custom_check_routines ) :
	conf = Configure( clam_env, custom_tests = custom_check_routines )
	
	# clam env
	# check for pkg-config, compiler support, bash features, et.
	print """\
############################################
### GLOBAL CLAM DEPENDENCIES CHECKING    ###
############################################"""

	if not conf.check_pkg_config( conf ) :
		print 'WARNING: pkg-config is not installed'
		clam_env['pkg_config_available'] = False
	else :
		clam_env['pkg_config_available'] = True

	if clam_env['double'] :
		clam_env.Append( CPPFLAGS=['-DCLAM_DOUBLE'] )
	else :
		clam_env.Append( CPPFLAGS=['-DCLAM_FLOAT'] )

	if not clam_env['checks'] :
		clam_env.Append( CPPFLAGS=['-DCLAM_DISABLE_CHECKS'] )

	if clam_env['release_asserts'] :
		clam_env.Append( CPPFLAGS=['-DCLAM_USE_RELEASE_ASSERTS'] )

	if clam_env['release'] :
		clam_env.Append( CCFLAGS=Split('-O2 -fomit-frame-pointer -Wall') )
	else :
		clam_env.Append( CCFLAGS=Split('-g -Wall') )

	# pthreads testing
	result = conf.CheckCHeader('pthread.h')
	if not result :
		print "Could not find pthread (Posix Threads) library headers!"
		Exit(1)
	result = conf.CheckLib( 'pthread', 'pthread_join' )
	if not result :
		print "Could not find pthread (Posix Threads) library binaries!"
		Exit(1)
	result = conf.check_pthread()
	if not result :
		print "Thorough pthread check failed! Check config.log for details..."
		Exit(1)
	
	if result :
		clam_env.Append( CPPFLAGS=['-DUSE_PTHREADS=1'] )
		#clam_env.Append( LIBS=['pthread'] )

	clam_env['preinclude'] = 'preinclude.hxx'

	clam_env = conf.Finish()


def setup_core_environment( core_env, custom_check_routines ) :
	conf = Configure( core_env, custom_tests = custom_check_routines )
	if core_env['xmlbackend'] == 'xercesc' :
		failed = False	
		if not failed and not conf.CheckCXXHeader('xercesc/util/PlatformUtils.hpp') :
			print "Could not find xerces c headers! Defaulting to the null xml backend"
			failed = True
		if not failed and not conf.check_xerces_c( conf ) :
			print "xerces c code compile/link/run test failed! Check config.log for details..."
			failed = True
		
		if not failed :
			core_env.Append( CPPFLAGS=['-DUSE_XERCES', '-DCLAM_USE_XML'] )
		else :
			core_env['xmlbackend'] = 'none'
			
	elif core_env['xmlbackend'] == 'xmlpp' :
		failed = False
		if core_env['pkg_config_available'] :
			res = conf.pkg_config_check_existence( conf, name='libxml++-2.6' )
			if res :
				core_env.ParseConfig( 'pkg-config --cflags --libs libxml++-2.6' )
			else :
				failed = True
		else :
			failed = True
			
		if not failed and not conf.check_xmlpp( conf ) : 
			print "\tERROR: libxml++ code compile/link/run test failed! Check config.log for details"
			failed = True
		
		if not failed:
			core_env.Append( CPPFLAGS=['-DUSE_XMLPP','-DCLAM_USE_XML'] )
		else :
			core_env['xmlbackend'] = 'none'	

	core_env = conf.Finish()

	

# SConstruct file for CLAM
# Main section

version = '0.8'
Export('version')

top = '../..'
Export('top')

clam_env = Environment()

Export('clam_env')

setup_build_options( clam_env )


#registering custom checks
custom_check_routines = dict()

for check_name, check_routine in package_checks.items() :
	custom_check_routines[check_name] = check_routine

for check_name, check_routine in tool_checks.items() :
	custom_check_routines[check_name] = check_routine

for check_name, check_routine in generic_checks.items() :
	custom_check_routines[check_name] = check_routine


# core env, CLAM core module checks
setup_global_environment( clam_env, custom_check_routines )

print """\
############################################
### CLAM MODULES DEPENDENCIES CHECKING   ###
############################################"""

core_env = clam_env.Copy()
Export('core_env')

setup_core_environment( core_env, custom_check_routines )

clam_env['xmlbackend'] = core_env['xmlbackend']
if clam_env['xmlbackend'] != 'none' :
	clam_env.Append( CPPFLAGS=['-DCLAM_USE_XML'] )



make_install_dirnames(clam_env)

#building

print """\
##############################################
### BUILDING CLAM LIBRARIES                ###
##############################################"""

SConscript('core/SConscript')
