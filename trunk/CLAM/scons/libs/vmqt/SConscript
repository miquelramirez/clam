# SConstruct file for CLAM vmqt
from buildtools import *
from buildtools.include_rename import *
from buildtools.pkggen import PackageData
from buildtools.file_retriever import FileRetriever
import os, sys

print """\
####################################################################
### BOOTSTRAPPING CLAM QT-BASED VISUALIZATION MODULE LIBRARY   ###
####################################################################"""

Import('vmqt_env version top install_dirs header_db')

print "Creating pkg-config descriptor...",
pkg_data = PackageData( 'clam_vmqt', version, [] )
pkg_data.create_pkg_descriptor( vmqt_env, 'clam_vmqt.pc' )
print "ok"

print "Gathering necessary source files...",
if not os.path.exists('src') :
	os.mkdir('src')
if not os.path.exists('include' ) :
	os.makedirs('include/CLAM')

basedir =  top+'/..'

folders = []

for root, _, _ in os.walk( basedir+'/'+'src/Visualization/QTVM' ) :
	if not 'CVS' in root :
		folders.append( root.split('../')[-1] )


blacklist = []

file_retriever = FileRetriever( basedir, folders, blacklist )

file_retriever.scan()

store_headers_in_db( header_db )
for filename in file_retriever.headers :
	update_includes( header_db, filename )
for filename in file_retriever.sources :
	update_includes( header_db, filename )


print "ok"
vmqt_env.Append(CPPPATH=['include','../core/include','../processing/include','../audioio/include'])
vmqt_env.Append(CCFLAGS='-include CLAM/%s'%vmqt_env['preinclude'])
vmqt_env.Append(LIBS=['clam_core','clam_processing','clam_audioio'])
vmqt_env.Append(LIBPATH=['../core','../processing','../audioio'])

soname = 'libclam_vmqt.so.%s'%version.split('.')[0]
vmqt_env.Append(SHLINKFLAGS=['-Wl,-soname,%s'%soname] )

lib = vmqt_env.SharedLibrary( 'clam_vmqt', file_retriever.sources, SHLIBSUFFIX='.so.%s'%version )

vmqt_env.AddPostAction( lib, Action(make_lib_names) )
