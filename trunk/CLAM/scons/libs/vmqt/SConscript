# SConstruct file for CLAM vmqt
from buildtools import *
from buildtools.include_rename import *
from buildtools.pkggen import PackageData
from buildtools.file_retriever import FileRetriever
from buildtools.rulesets import *
import os, sys
Import('vmqt_env version top install_dirs header_db')

def define_module_contents() :
	print "Gathering necessary source files...",
	#if not os.path.exists('src') :
	#	os.mkdir('src')
	#if not os.path.exists('include' ) :
	#	os.makedirs('include/CLAM')
	if not os.path.exists('CLAM') :
		os.makedirs('CLAM')

	folders = ['src/Visualization/QTVM/Controllers','src/Visualization/QTVM/DirectPlots','src/Visualization/QTVM/Network/Controllers','src/Visualization/QTVM/Network/Plots','src/Visualization/QTVM/Network/Processings','src/Visualization/QTVM/Network/Renderers','src/Visualization/QTVM/Network/Surfaces','src/Visualization/QTVM/Network/Utils','src/Visualization/QTVM/Players','src/Visualization/QTVM/Plots','src/Visualization/QTVM/Plots/SMS','src/Visualization/QTVM/Renderers','src/Visualization/QTVM/Surfaces','src/Visualization/QTVM/SysPlot','src/Visualization/QTVM/Utils','src/Visualization/QTVM/Widgets','src/Visualization/QTVM/Widgets/BPFEditor','src/Visualization/QTVM/Widgets/Label','src/Visualization/QTVM/Widgets/Misc','src/Visualization/QTVM/Widgets/Playable','src/Visualization/QTVM/Widgets/Rulers','src/Visualization/QTVM/Widgets/Scroll'] 

	blacklist = []

	file_retriever = FileRetriever( top+'/..', folders, blacklist )

	file_retriever.out_src = 'CLAM'
	file_retriever.out_inc = 'CLAM'

	file_retriever.scan()

	store_headers_in_db( header_db )
	for filename in file_retriever.headers :
		update_includes( header_db, filename )
	for filename in file_retriever.sources :
		update_includes( header_db, filename )

	manifest = Manifest()
	manifest.store( file_retriever.headers, file_retriever.sources )

	print "ok"
	return file_retriever.headers, file_retriever.sources


if not vmqt_env.GetOption('clean') :
	print """\
####################################################################
### BOOTSTRAPPING CLAM QT-BASED VISUALIZATION MODULE LIBRARY   ###
####################################################################"""
	print "Creating pkg-config descriptor...",
	pkg_data = PackageData( 'clam_vmqt', version, [] )
	pkg_data.create_pkg_descriptor( vmqt_env, 'clam_vmqt.pc' )
	print "ok"


if not vmqt_env.GetOption('clean') :
	header_files, source_files = define_module_contents()
else :
	manifest = Manifest()
	header_files = []
	source_files = []
	manifest.load( header_files, source_files )


headers = [ File(header) for header in header_files ]

vmqt_env.Prepend(CPPPATH=['.','../core/include','../processing/include','../audioio/include'])

if not vmqt_env.GetOption('clean') :
	handle_preinclude( vmqt_env )

vmqt_env.Append(LIBS=['clam_core', 'clam_processing','clam_audioio'])

#if sys.platform == 'win32' : 
#	vmqt_env.Append( LIBS=['clam_core_templates'] )

vmqt_env.Prepend(LIBPATH=['../core','../processing','../audioio'])

if sys.platform != 'win32' :
	vmqt_tgt, vmqt_install_tgt = posix_lib_rules( 'vmqt', version, headers, source_files, install_dirs, vmqt_env )
else :
	vmqt_tgt, vmqt_install_tgt = win32_lib_rules( 'vmqt', version, headers, source_files, install_dirs, vmqt_env )

Return( 'vmqt_tgt', 'vmqt_install_tgt' )

