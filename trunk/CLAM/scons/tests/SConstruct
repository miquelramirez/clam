import sys, os, glob

def parse_pkg_config( env ) :
	prefix = env['clam_prefix']
	descriptor_path = prefix + "\\lib\\pkgconfig\\*.pc"
	descriptors = glob.glob( descriptor_path )
	libpath = dict()
	libs = dict()
	cppflags = dict()
	cpppath = dict()
	ccflags = dict()
	for desc_file in descriptors :
		instream = open( desc_file )

		for line in instream :
			tokens = line.strip().split(' ')
			if tokens[0] == 'Libs:' :
				for token in tokens[1:] :
					if "/LIBPATH:" in token :
						libpath[token.replace("/LIBPATH:", "")] = True
					else :
						libs[token] = True
			elif tokens[0] == 'Cflags:':
				foo = line.strip().split(' /')
				for token in foo[1:] :
					token = '/' + token
					# search for -X flags
					if(token.find(' -')!=-1):
						listOfRealTokens = token.split(' -')
						#print('new token to parse: ' + token)
						firstToken = listOfRealTokens[0]
						if "/I" in firstToken:
							cpppath[ firstToken.replace("/I","") ] = True
						elif "/D" in firstToken :
							cppflags[ firstToken ] = True
						else :
							ccflags[firstToken] = True
						for realToken in listOfRealTokens[1:]:
							#print('new token to parse: ' + realToken)
							ccflags['-'+realToken] = True
					else:
						#print('new token to parse: ' + token)
						if "/I" in token :
							cpppath[ token.replace("/I","") ] = True
						elif "/D" in token in token :
							cppflags[ token ] = True
						else :
							#print('token: ' + token )
							ccflags[token] = True
			else :
				pass

		instream.close()
	print "Adding to evironment LIBPATH:"
	for elem in libpath.keys() : print elem,
	print
	env.Append( LIBPATH = libpath.keys() )
	print "Adding to environment LIBS:"
	for elem in libs.keys() : print elem,
	print
	env.Append( LIBS = libs.keys() )
	print "Adding to environment CPPFLAGS:"
	for elem in cppflags.keys() : print elem,
	print
	env.Append( CPPFLAGS = cppflags.keys() )
	print "Adding to environment CCFLAGS:"
	for elem in ccflags.keys() : print elem,
	print
	env.Append( CCFLAGS = ccflags.keys() )
	print "Adding to environment CPPPATH:"
	for elem in cpppath.keys() : print elem,
	print
	env.Append( CPPPATH = cpppath.keys() )

sys.path+=['../libs']
from buildtools import *
# CLAM unit tests build

tests_env = Environment( ENV=os.environ )
Export( 'tests_env' )

opts = Options('unit_tests.conf')

if sys.platform == 'linux2' :
	opts.Add( PathOption( 'clam_prefix', 'Prefix were CLAM was installed', '/usr') )
elif sys.platform == 'darwin' :
	opts.Add( PathOption( 'clam_prefix', 'Prefix were CLAM was installed', '/usr/local') )
else :
	opts.Add( PathOption( 'clam_prefix', 'Prefix were CLAM was installed', 'G:\projects\CLAM-bin' ) )
if sys.platform != 'win32' :
	opts.Add( PathOption( 'install_prefix', 'Prefix where Network editor is going to be installed', '/usr') )
else :
	opts.Add( PathOption( 'install_prefix', 'Prefix where Network editor is going to be installed', 'G:\projects\CLAM-bin\\bin') )
if sys.platform == 'win32' :
	opts.Add( PathOption( 'cppunit_prefix', 'Prefix were cppunit was installed', 'G:\projects\cppunit' ))

opts.Add( BoolOption( 'release', 'Build CLAM Tests enabling compiler optimizations', 'no') )
opts.Update(tests_env)
opts.Save('CLAMTests.conf', tests_env)
Help(opts.GenerateHelpText(tests_env))

tests_env['project'] = 'CLAMTests'

if sys.platform != 'win32' :
	tests_env.Append( LIBS=['cppunit','dl'] )
else :
	tests_env.Append( LIBS=['cppunit_vc7'] )

if sys.platform != 'win32' :
	if tests_env['release'] :
		tests_env.Append( CCFLAGS=['-O3','-fomit-frame-pointer','-Wall'] )
	else :
		tests_env.Append( CCFLAGS=['-g', '-Wall'] )
	tests_env.ParseConfig( 'pkg-config --cflags --libs clam_core clam_processing clam_audioio' )
else :
	tests_env.Append( CPPPATH=[tests_env['cppunit_prefix']+'/include'] )
	tests_env.Append( LIBPATH=[tests_env['cppunit_prefix']+'/lib'] )
	parse_pkg_config( tests_env )
	if tests_env['release'] :
		tests_env.Append( CPPFLAGS = ['-DWIN32'] )
		tests_env.Append( CCFLAGS = '/FD /GR /GX /MD /O2 /GL /W3 /Zm1000' )	
		tests_env.Append( LINKFLAGS = ['/LTCG'] )
	else :
		tests_env.Append( CPPFLAGS = ['-DWIN32', '-D_DEBUG'] )
		tests_env.Append( CCFLAGS = '/D /FD /GR /GX /GZ /MDd /Od /W3 /ZI /Zm1000' )
		tests_env.Append( LINKFLAGS = ['/OPT:NOREF', '/OPT:NOICF', '/DEBUG'] )


# read flags from pkg-config clam library descriptors

tests_env.ParseConfig( 'pkg-config --cflags --libs clam_core clam_processing clam_audioio')

SConscript('unit_tests/SConscript')
SConscript('functional_tests/SConscript')

Alias( 'all', ['run_unit_tests','run_functional_tests'] )
