#!/usr/bin/python
Import('env')
import sys, os, glob

def scanFiles(pattern, paths) :
	files = []
	for path in paths :
		files+=glob.glob(path+"/"+pattern)
	return files

def recursiveDirs(root) :
	return filter( (lambda a : a.rfind( "CVS")==-1 ),  [ a[0] for a in os.walk(root)]  )

def unique(list) :
	return dict.fromkeys(list).keys()

folders = [
	'UnitTests',
	'UnitTests/CommonHelpers',
	'UnitTests/ControlTests',
	'UnitTests/DescriptorsTests',
	'UnitTests/DynamicTypeTests',
	'UnitTests/FactoryTest',
	'UnitTests/FlowControlTests',
	'UnitTests/NonComponentData',
	'UnitTests/PortsTest',
	'UnitTests/ProcessingBaseTests',
	'UnitTests/ProcessingDataTests',
	'UnitTests/ProcessingsTests',
	'UnitTests/StandardTests',
	'UnitTests/ToolsTests',
	'UnitTests/XMLAdaptersTests',
	]
blacklist = [
	'UnitTests/TestRunnerQt.cxx',
	'UnitTests/FactoryTest/PolymorphicTest.cxx',
	"UnitTests/ProcessingsTests/AudioMixerTest.cxx",
	# TODO see for libxml?
	"UnitTests/XMLAdaptersTests/LibXmlDomDocumentHandlerTest.cxx",
	"UnitTests/XMLAdaptersTests/LibXmlDomReaderTest.cxx",
	"UnitTests/XMLAdaptersTests/LibXmlDomReadingContextTest.cxx",
	"UnitTests/XMLAdaptersTests/LibXmlDomWriterTest.cxx",
	]


folders = [ os.path.join('../../../test', folder) for folder in folders ]
blacklist = [ os.path.join('../../../test', blacksheep) for blacksheep in blacklist ]
sources = scanFiles('*.cxx', folders)
headers = scanFiles('*.hxx', folders)
print sources
for blacksheep in blacklist :
	sources.remove(blacksheep) 

print headers
print sources

if sys.platform != 'win32'  :
	env.Append( CPPPATH=['include'] )
else :
	env.Append( CCFLAGS = ['/EHsc'] )
	env.Append( LINKFLAGS = ['/subsystem:console','/machine:x86'] )	

unit_tests = env.Program( 'UnitTests', sources )

test_alias = Alias( 'run_unit_tests', [unit_tests], unit_tests[0].abspath )

AlwaysBuild( test_alias )

