#!/usr/bin/python
"""
This is an example on how the Qt4 examples provided by Trolltech
should be compiled using the qt4 tool for scons.
To use it just copy it on the root of the Qt4 examples tree and type
'scons -f SConstruct.qt4examples'.
"""

qt4ToolLocation='.'

import glob
import os

def recursiveDirs(root) :
	return filter( (lambda a : a.rfind( "CVS")==-1 ),  [ a[0] for a in os.walk(root)]  )

def unique(list) :
	return dict.fromkeys(list).keys()

def scanFiles(dir, accept=["*.cpp"], reject=[]) :
	sources = []
	paths = recursiveDirs(dir)
	for path in paths :
		for pattern in accept :
			sources+=glob.glob(path+"/"+pattern)
	for pattern in reject :
		sources = filter( (lambda a : a.rfind(pattern)==-1 ),  sources )
	return unique(sources)

def subdirsContaining(root, patterns):
	dirs = unique(map(os.path.dirname, scanFiles(root, patterns)))
	dirs.sort()
	return dirs
	

targetDirs = subdirsContaining(".", ["*.cpp"])
targetDirs = map(os.path.normpath, targetDirs)

pluginDirs = [
	"designer/containerextension", # Undefined interface error: fixed, but should be built as library
	"designer/customwidgetplugin", # Undefined interface error: fixed, but should be built as library
	"designer/taskmenuextension", # Undefined interface error: fixed but should be built as library
	"designer/worldtimeclockplugin", # Undefined interface error: fixed but should be built as library
	"tools/echoplugin/plugin", # needs extended include path to tools/echoplugin/echowindow
	"tools/styleplugin/plugin", # Should be compiled as library
	"tools/plugandpaintplugins/extrafilters", # needs extended include path to tools/plugandpaint
]
staticPluginDirs = [
	"tools/plugandpaintplugins/basictools", # needs extended include path to tools/plugandpaint
]

# The following blacklisted directories contain examples that
# couldn't be compiled with that script and the tool as they are.
blacklist=[
#	"designer/calculatorbuilder", # Missing designer libs in debian -> Fixed!!!
#	"designer/worldtimeclockbuilder", #  Missing designer libs in debian -> Fixed!!!
	"network/torrent", # Tool Bug: cxx moc handling (includes a .moc file)
	"qdbus/complexpingpong", # generates two binaries
	"qdbus/pingpong", # generates two binaries
	"qdbus/remotecontrolledcar/car", # scanner fails to detect moc'ed object (_p.h suffix)
	"qdbus/remotecontrolledcar/controller", # scanner fails to detect moc'ed object (_p.h suffix)
	"qtestlib/tutorial1", # Tool Bug: cxx moc handling (includes a .moc file)
	"qtestlib/tutorial2", # Tool Bug: cxx moc handling (includes a .moc file)
	"qtestlib/tutorial3", # Tool Bug: cxx moc handling (includes a .moc file)
	"qtestlib/tutorial4", # Tool Bug: cxx moc handling (includes a .moc file)
	"script/context2d", # Collision between the executable and an existing directory
#	"sql/relationaltablemodel", # Should pkg_config define QT_GUI_LIB? -> Yes it should, working!
#	"tools/qtdemo", # includes private/x11_qt_p.h -> Fixed!!!
#	"tools/plugandpaint", # undefined symbol qt_plugin_instance_pnp_basictools
	"widgets/validators/", # Tool Bug: cxx moc handling (includes a .moc file)
]
blacklist = map(os.path.normpath, blacklist)
pluginDirs = map(os.path.normpath, pluginDirs)
staticPluginDirs = map(os.path.normpath, staticPluginDirs)

env = Environment(tools=['default','qt4'], toolpath=[qt4ToolLocation])

env['CXXFILESUFFIX']='.cpp'
env.EnableQt4Modules([
	"QtGui",
	"QtCore",
	"QtNetwork",
	"QtOpenGL",
	"Qt3Support",
	"QtXml",
	"QtUiTools",
	"QtSvg",
	"QtSql",
	"QtTest",
	"QtAssistant",
	"QtScript",
	"QtDBus",
	"QtDesigner",
	])

programs = []
for dir in targetDirs:
	if os.path.normpath(dir) in blacklist: continue
	sources = scanFiles(dir,
		accept=["*.cpp", "*.c"], # *.c needed for some 3rd party files on the examples
		reject=["qrc_", "ui_", "moc_",
			"graphicsview/portedcanvas/blendshadow", # Extra main
			"graphicsview/portedcanvas/makeimg", # Extra main
		])
	
	# rcc needs a -name flag because examples use identified resource files
	def takebasename(file) : return os.path.splitext(os.path.basename(file))[0]
	resources = [ env.Qrc(qrc, QT4_QRCFLAGS='-name '+takebasename(qrc))
			for qrc in scanFiles(dir, ['*.qrc'])]
	interfaces = [env.Uic4(uic)
			for uic in scanFiles(dir, ['*.ui'])]

	additionalPaths = subdirsContaining(dir, ['*.h', '*.ui'])
	extraDefines = []
	if dir == 'tools/plugandpaint' :
		sources.append('tools/plugandpaintplugins/basictools/libbasictools.a')
	if dir == 'tools/plugandpaintplugins/basictools' :
		additionalPaths.append("tools/")
	if dir == 'tools/plugandpaintplugins/extrafilters' :
		additionalPaths.append("tools/")
	if dir == 'tools/echoplugin/plugin' :
		additionalPaths.append("tools/echoplugin/echowindow/")
	
	if dir in staticPluginDirs :
		print "StaticLib:", dir
		extraDefines += ['QT_SHARED','QT_STATICPLUGIN','QT_PLUGIN']
		target = env.StaticLibrary(
				dir+"/"+os.path.basename(dir),
				sources+resources,
				CPPPATH=env['CPPPATH']+additionalPaths+[".."],
				CPPDEFINES=env['CPPDEFINES']+extraDefines,
				)
	elif dir in pluginDirs :
		print "Plugin:", dir
		extraDefines += ['QT_SHARED','QT_PLUGIN','QDESIGNER_EXPORT_WIDGETS'] # The later is just needed for designer plugins
		target = env.SharedLibrary(
				dir+"/"+os.path.basename(dir),
				sources+resources,
				CPPPATH=env['CPPPATH']+additionalPaths+[".."],
				CPPDEFINES=env['CPPDEFINES']+extraDefines,
				)
	else:
		print "Program:", dir
		extraDefines += ['QT_SHARED'] # The later is just needed for designer plugins
		target = env.Program(
				dir+"/"+os.path.basename(dir),
				sources+resources,
				CPPPATH=env['CPPPATH']+additionalPaths+[".."])
	programs += target

env.Alias('all', programs)
env.Default('all')


