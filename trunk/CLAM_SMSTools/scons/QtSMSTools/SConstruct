# SConstruct for SMS Tools
#
import sys, os, string, glob

version='0.9.0-pre2'

def create_setup( target, source, env ) :
	os.system( "makensis clam_qtsmstools.nsi" )

def create_setup_message( target, source, env ) :
	return "generating QtSMSTools Installer"

def create_dmg( target, source, env) :
	os.system( "mkdir DMG" )
	os.system( "cp README.txt DMG" )
	os.system( "cp -r QtSMSTools.app DMG" )
	os.system( "sudo hdiutil create -srcfolder DMG -volname CLAM_NetworkEditor -uid 0 CLAM_QtSMSTools-%s.dmg"%version )
	os.system( "rm -rf DMG" )

def create_dmg_message( target, source, env):
	return "Creating DMG package"

def parse_pkg_config( env ) :
	prefix = env['clam_prefix']
	descriptor_path = prefix + "\\lib\\pkgconfig\\*.pc"
	descriptors = glob.glob( descriptor_path )
	libpath = dict()
	libs = dict()
	cppflags = dict()
	cpppath = dict()
	ccflags = dict()
	for desc_file in descriptors :
		instream = open( desc_file )

		for line in instream :
			tokens = line.strip().split(' ')
			if tokens[0] == 'Libs:' :
				for token in tokens[1:] :
					if "/LIBPATH:" in token :
						libpath[token.replace("/LIBPATH:", "")] = True
					else :
						libs[token] = True
			elif tokens[0] == 'Cflags:':
				foo = line.strip().split(' /')
				for token in foo[1:] :
					token = '/' + token
					# search for -X flags
					if(token.find(' -')!=-1):
						listOfRealTokens = token.split(' -')
						#print('new token to parse: ' + token)
						firstToken = listOfRealTokens[0]
						if "/I" in firstToken:
							cpppath[ firstToken.replace("/I","") ] = True
						elif "/D" in firstToken :
							cppflags[ firstToken ] = True
						else :
							ccflags[firstToken] = True
						for realToken in listOfRealTokens[1:]:
							#print('new token to parse: ' + realToken)
							ccflags['-'+realToken] = True
					else:
						#print('new token to parse: ' + token)
						if "/I" in token :
							cpppath[ token.replace("/I","") ] = True
						elif "/D" in token in token :
							cppflags[ token ] = True
						else :
							ccflags[token] = True
			else :
				pass

		instream.close()
	print "Adding to evironment LIBPATH:"
	for elem in libpath.keys() : print elem,
	print
	env.Append( LIBPATH = libpath.keys() )
	print "Adding to environment LIBS:"
	for elem in libs.keys() : print elem,
	print
	env.Append( LIBS = libs.keys() )
	print "Adding to environment CPPFLAGS:"
	for elem in cppflags.keys() : print elem,
	print
	env.Append( CPPFLAGS = cppflags.keys() )
	print "Adding to environment CCFLAGS:"
	for elem in ccflags.keys() : print elem,
	print
	env.Append( CCFLAGS = ccflags.keys() )
	print "Adding to environment CPPPATH:"
	for elem in cpppath.keys() : print elem,
	print
	env.Append( CPPPATH = cpppath.keys() )

tools_env = Environment( tools=['default', 'qt'], ENV=os.environ )
if sys.platform == 'win32' :
	tools_env.Replace( QT_LIB = 'qt-mt322' )
else :
	tools_env.Replace( QT_LIB = 'qt-mt' )

opts = Options( 'QtSMSTools.conf' )

if sys.platform == 'linux2' :
	opts.Add( PathOption( 'clam_prefix', 'Prefix were CLAM was installed', '/usr') )
elif sys.platform == 'darwin':
	opts.Add( PathOption( 'clam_prefix', 'Prefix were CLAM was installed', '/usr/local') )
else :
	opts.Add( PathOption( 'clam_prefix', 'Prefix were CLAM was installed', 'G:\projects\CLAM-bin' ) )
if sys.platform != 'win32' :
	opts.Add( PathOption( 'install_prefix', 'Prefix where SMSTools is going to be installed', '/usr') )
else :
	opts.Add( PathOption( 'install_prefix', 'Prefix where SMSTools is going to be installed', 'G:\projects\CLAM-bin\\bin') )
opts.Add( BoolOption( 'release', 'Build SMS Tools enabling compiler optimizations', 'no' ) )
opts.Update( tools_env )
opts.Save( 'QtSMSTools.conf', tools_env )
Help( opts.GenerateHelpText( tools_env ) )


if sys.platform != 'win32' :
	if tools_env['release'] :
		tools_env.Append( CCFLAGS=['-O3','-fomit-frame-pointer','-Wall'] )
	else :
		tools_env.Append( CCFLAGS=['-g', '-Wall'] )

	export_pkg_config = 'export PKG_CONFIG_PATH='+tools_env['clam_prefix']+'/lib/pkgconfig'
	execute_pkg_config = 'pkg-config --cflags --libs clam_core clam_processing clam_audioio clam_vmqt'
	tools_env.ParseConfig( export_pkg_config + ' && ' + execute_pkg_config  )
else :
	if tools_env['release'] :
		#tools_env.Append( CPPFLAGS= ['-DWIN32', '-D_USRDLL'] )
		tools_env.Append( CPPFLAGS = ['-DWIN32'] )
		tools_env.Append( CCFLAGS = '/FD /GR /GX /MD /O2 /GL /W3 /Zm1000' )	
		tools_env.Append( LINKFLAGS = ['/LTCG'] )
	else :
		#tools_env.Append( CPPFLAGS = ['-DWIN32', '-D_USRDLL', '-D_DEBUG'] )
		tools_env.Append( CPPFLAGS = ['-DWIN32', '-D_DEBUG'] )
		tools_env.Append( CCFLAGS = '/D /FD /GR /GX /GZ /MDd /Od /W3 /ZI /Zm1000' )
		tools_env.Append( LINKFLAGS = ['/OPT:NOREF', '/OPT:NOICF', '/DEBUG'] )

source_dirs = ['../../src/QtImpl', '../../src/QtImpl/Application', '../../src/QtImpl/GUI/MainWindow', 
		'../../src/QtImpl/System', '../../src/QtImpl/GUI/misc', '../../src/QtImpl/GUI/Dialogs/Configurator',
		'../../src/QtImpl/GUI/Dialogs/ScoreEditor','../../src/QtImpl/GUI/Dialogs/License',
		'../../src/QtImpl/GUI/Dialogs/AboutBox']

tools_env.Append( CPPPATH=source_dirs )
sourcefiles = []
for dir in source_dirs :
	sourcefiles += glob.glob(dir+'/*.cxx')
	sourcefiles += glob.glob(dir+'/*.ui')
sourcefiles.append('../../src/Progress.cxx')
sourcefiles.append('../../src/SMSBase.cxx')
sourcefiles.append('../../src/WaitMessage.cxx')
sourcefiles.append('../../src/SerializationController.cxx')
sourcefiles.append('../../src/SMSAnalysisSynthesisConfig.cxx')
sourcefiles.append('../../src/SDIFSerializer.cxx')
sourcefiles.append('../../src/XMLSerializer.cxx')
sourcefiles.append('../../src/GUI/ScoreEditor/SMS_ScoreEditor_Helper.cxx')
tools_env.Append( CPPPATH = '../../src/' )
tools_env.Append( CPPPATH = '../../src/GUI/ScoreEditor/' )

if sys.platform != 'win32' :
	tools_env.Append(CCFLAGS= '-include CLAM/preinclude.hxx')
	tools_env.Append(CCFLAGS= '-DQT_THREAD_SUPPORT')

	if sys.platform == 'darwin' :
		tools_bin_pre = tools_env.Program( 'QtSMSTools', sourcefiles, LINKFLAGS=['-bind_at_load','-dynamic'] )
		bundle_bin = tools_env.Install( 'QtSMSTools.app/Contents/MacOS', tools_bin_pre )
		bundle_data = tools_env.Install('QtSMSTools.app/Contents', 'resources/Info.plist')
		bundle_icon = tools_env.Install('QtSMSTools.app/Contents/Resources', 'resources/CLAM.icns')
		tools_bin = [ tools_bin_pre, bundle_bin, bundle_data, bundle_icon ]

		#DMG creation process
		dmg_bld = Builder( action=Action(create_dmg, create_dmg_message ))
		tools_env.Append( BUILDERS={'CreateDMG' : dmg_bld} )
		dmg = tools_env.CreateDMG('notused', tools_bin )
		tools_env.Alias('dmg', [tools_bin, dmg])

	else:
		htmls = [ '../../resources/html/en/license.html' ]
		install_html = tools_env.Install( tools_env['install_prefix']+"/share/smstools/html/en", htmls )
		manpage = ['../../resources/man/man9/QtSMSTools.9']
		install_manpage = tools_env.Install( tools_env['install_prefix']+"/share/man/man9", manpage )
		tools_bin = tools_env.Program( 'QtSMSTools', sourcefiles, LINKFLAGS=['-rdynamic'] )
		install_bin = tools_env.Install( tools_env['install_prefix']+'/bin', tools_bin )
		tools_env.AddPostAction( install_bin, 'chmod 755 $TARGET' )
		install_alias = tools_env.Alias( 'install', [install_bin,install_html, install_manpage] )
else :
	parse_pkg_config( tools_env )
	tools_env.Append( CCFLAGS = ['/FICLAM/preinclude.hxx', '/EHsc', '-DQT_THREAD_SUPPORT'] )
	tools_env.Append( LINKFLAGS = ['/subsystem:console','/machine:x86'] )
	tools_bin = tools_env.Program( 'QtSMSTools', sourcefiles )

	htmls = [ '../../resources/html/en/license.html' ]
	install_html = tools_env.Install( tools_env['install_prefix']+"html/en", htmls )
	manpage = ['../../resources/man/man9/QtSMSTools.9']
	install_manpage = tools_env.Install( tools_env['install_prefix']+"man/man9", manpage )

	install_bin = tools_env.Install( tools_env['install_prefix'], tools_bin )
	install_alias = tools_env.Alias( 'install', [install_bin,install_html, install_manpage] )

	variantVCProj = 'Debug'
	if tools_env['release'] :
		variantVCProj = 'Release' 

	generate_vcproj = tools_env.MSVSProject( target = 'QtSMSTools' + tools_env['MSVSPROJECTSUFFIX'],
				srcs = sourcefiles,
				buildtarget = tools_bin,
				variant = variantVCProj )

	setup_bld = Builder( action=Action(create_setup, create_setup_message ))
	tools_env.Append( BUILDERS={'CreateSetup' : setup_bld} )
	setup = tools_env.CreateSetup('notused', tools_bin)
	tools_env.Alias('CreateSetup', [setup])

	vc_alias = tools_env.Alias('visual_project', [generate_vcproj])

Default(tools_bin)
