// generated by Fast Light User Interface Designer (fluid) version 1.0104

#include "SoundSourceSelection.h"

Fl_Window* SMS_SoundSourceSelection::BuildContents() {
  Fl_Window* w;
  { Fl_Window* o = mpWindow = new Fl_Window(498, 364, "Input signal source selection");
    w = o;
    o->user_data((void*)(this));
    { Fl_File_Input* o = mFilenameCollector = new Fl_File_Input(2, 25, 360, 35, "Audio file containing input signal:");
      o->labelsize(12);
      o->textsize(12);
      o->align(FL_ALIGN_TOP_LEFT);
    }
    { Fl_Button* o = mBrowseFileSystem = new Fl_Button(368, 35, 130, 25, "Browse filesystem...");
      o->box(FL_THIN_UP_BOX);
      o->labelsize(12);
    }
    { Fl_Group* o = mSignalThumbnail = new Fl_Group(1, 75, 364, 285, "No signal was selected");
      o->box(FL_ENGRAVED_FRAME);
      o->align(FL_ALIGN_CENTER|FL_ALIGN_INSIDE);
      o->end();
    }
    { Fl_Group* o = mSignalParametersContainer = new Fl_Group(370, 95, 127, 180, "Audio attributes");
      o->box(FL_ENGRAVED_BOX);
      o->labelfont(1);
      o->labelsize(12);
      o->align(FL_ALIGN_TOP|FL_ALIGN_INSIDE);
      { Fl_Output* o = mSampleRate = new Fl_Output(375, 140, 120, 25, "Sample Rate: ");
        o->box(FL_NO_BOX);
        o->labelsize(10);
        o->textsize(10);
        o->align(FL_ALIGN_TOP_LEFT);
      }
      { Fl_Output* o = mSampleResolution = new Fl_Output(375, 190, 120, 25, "Sample Resolution:");
        o->box(FL_NO_BOX);
        o->labelsize(10);
        o->textsize(10);
        o->align(FL_ALIGN_TOP_LEFT);
      }
      { Fl_Output* o = mDuration = new Fl_Output(375, 245, 120, 25, "Duration:");
        o->box(FL_NO_BOX);
        o->labelsize(10);
        o->textsize(10);
        o->align(FL_ALIGN_TOP_LEFT);
      }
      o->end();
    }
    { Fl_Group* o = new Fl_Group(370, 285, 128, 70, "Playback controls");
      o->box(FL_ENGRAVED_FRAME);
      o->labelfont(1);
      o->labelsize(12);
      o->align(FL_ALIGN_TOP|FL_ALIGN_INSIDE);
      { Fl_Button* o = mPlaySound = new Fl_Button(380, 315, 40, 30, "Play");
        o->box(FL_OSHADOW_BOX);
        o->down_box(FL_OFLAT_BOX);
        o->labelsize(10);
      }
      { Fl_Button* o = mStopSound = new Fl_Button(440, 315, 40, 30, "Stop");
        o->box(FL_OSHADOW_BOX);
        o->down_box(FL_OFLAT_BOX);
        o->labelsize(10);
      }
      o->end();
    }
    o->end();
  }
  return w;
}

Fl_Window* SMS_BasicAnalysisSettings::BuildContents() {
  Fl_Window* w;
  { Fl_Window* o = mWindow = new Fl_Window(497, 364, "Basic Analysis Settins");
    w = o;
    o->user_data((void*)(this));
    { Fl_Input* o = mAnalysisFrameLength = new Fl_Input(10, 25, 110, 25, "Analysis Window Width:");
      o->labelsize(12);
      o->textsize(12);
      o->align(FL_ALIGN_TOP_LEFT);
    }
    { Fl_Box* o = mFrameLengthUnit = new Fl_Box(120, 25, 25, 25, "ms");
      o->labelsize(12);
      o->align(FL_ALIGN_LEFT|FL_ALIGN_INSIDE);
    }
    { Fl_Value_Slider* o = mOverlapFactor = new Fl_Value_Slider(180, 25, 170, 25, "Window Overlap Factor:");
      o->type(1);
      o->labelsize(12);
      o->textsize(12);
      o->align(FL_ALIGN_TOP_LEFT);
    }
    { Fl_Box* o = mOverlapUnit = new Fl_Box(150, 25, 25, 25, "%");
      o->labelsize(12);
      o->align(FL_ALIGN_RIGHT|FL_ALIGN_INSIDE);
    }
    { Fl_Counter* o = mZeroPaddingFactor = new Fl_Counter(365, 25, 120, 25, "Zero Padding Factor:");
      o->labelsize(12);
      o->minimum(0);
      o->maximum(16);
      o->step(1);
      o->textsize(12);
      o->align(FL_ALIGN_TOP_LEFT);
    }
    { Fl_Choice* o = mWindowFunction = new Fl_Choice(11, 120, 314, 25, "Window function to be used:");
      o->down_box(FL_BORDER_BOX);
      o->labelsize(12);
      o->textsize(12);
      o->align(FL_ALIGN_TOP_LEFT);
    }
    { Fl_Group* o = mTDFunctionContainer = new Fl_Group(2, 165, 240, 195, "Time-domain window function shape");
      o->box(FL_ENGRAVED_FRAME);
      o->labelfont(1);
      o->labelsize(12);
      o->end();
    }
    { Fl_Group* o = mFDFunctionContainer = new Fl_Group(253, 165, 240, 195, "Frequency-domain window function shape");
      o->box(FL_ENGRAVED_FRAME);
      o->labelfont(1);
      o->labelsize(12);
      o->end();
    }
    { Fl_Button* o = mBrowseWithWindow = new Fl_Button(330, 120, 162, 25, "Browse audio with window...");
      o->box(FL_THIN_UP_BOX);
      o->labelsize(12);
    }
    { Fl_Output* o = mEffectiveSinSize = new Fl_Output(9, 75, 97, 30, "Samples used for Sinusoidal Analysis:");
      o->box(FL_NO_BOX);
      o->labelsize(12);
      o->textsize(12);
      o->align(FL_ALIGN_TOP_LEFT);
    }
    { Fl_Box* o = mEffectiveSinSizeDecorator = new Fl_Box(108, 75, 69, 30, "samples");
      o->labelsize(12);
      o->align(FL_ALIGN_LEFT|FL_ALIGN_INSIDE);
    }
    { Fl_Output* o = mEffectiveResSize = new Fl_Output(241, 75, 81, 30, "Samples used for Residual Analysis:");
      o->box(FL_NO_BOX);
      o->labelsize(12);
      o->textsize(12);
      o->align(FL_ALIGN_TOP_LEFT);
    }
    { Fl_Box* o = mEffectiveResSizeDecorator = new Fl_Box(330, 75, 69, 30, "samples");
      o->labelsize(12);
      o->align(FL_ALIGN_LEFT|FL_ALIGN_INSIDE);
    }
    o->end();
  }
  return w;
}

Fl_Window* SMS_SPpPAnalysisSettings::BuildContents() {
  Fl_Window* w;
  { Fl_Window* o = mWindow = new Fl_Window(497, 365, "Peaks And Pitch Detection Settings");
    w = o;
    o->user_data((void*)(this));
    { Fl_Input* o = mPeakMagnitudeThreshold = new Fl_Input(10, 40, 110, 25, " Peak Magnitude Threshold:");
      o->labelsize(12);
      o->textsize(12);
      o->align(FL_ALIGN_TOP_LEFT);
    }
    { Fl_Box* o = mPeakMagThresDecorator = new Fl_Box(120, 40, 46, 25, "dB");
      o->labelsize(12);
      o->align(FL_ALIGN_LEFT|FL_ALIGN_INSIDE);
    }
    { Fl_Input* o = mPeakFreqCutoff = new Fl_Input(12, 90, 109, 25, "Peak Detection Cutoff Frequency:");
      o->labelsize(12);
      o->textsize(12);
      o->align(FL_ALIGN_TOP_LEFT);
    }
    { Fl_Box* o = mPeakFreqCutoffDecorator = new Fl_Box(123, 90, 46, 25, "Hz");
      o->labelsize(12);
      o->align(FL_ALIGN_LEFT|FL_ALIGN_INSIDE);
    }
    { Fl_Group* o = mFreqRangeGroup = new Fl_Group(13, 140, 163, 185, "Pitch Search Range");
      o->box(FL_ENGRAVED_FRAME);
      o->labelfont(1);
      o->labelsize(12);
      { Fl_Box* o = mLowerBoundFreqDecorator = new Fl_Box(146, 180, 24, 25, "Hz");
        o->labelsize(12);
        o->align(FL_ALIGN_LEFT|FL_ALIGN_INSIDE);
      }
      { Fl_Box* o = mUpperBoundDecorator = new Fl_Box(148, 255, 26, 25, "Hz");
        o->labelsize(12);
        o->align(FL_ALIGN_LEFT|FL_ALIGN_INSIDE);
      }
      { Fl_Counter* o = mLowerBoundFreq = new Fl_Counter(20, 180, 125, 25, "Lower bound frequency:");
        o->labelsize(12);
        o->minimum(0);
        o->maximum(22050);
        o->step(10);
        o->value(50);
        o->textsize(12);
        o->align(FL_ALIGN_TOP_LEFT);
      }
      { Fl_Counter* o = mUpperBoundFreq = new Fl_Counter(19, 255, 128, 25, "Upper bound frequency:");
        o->labelsize(12);
        o->minimum(0);
        o->maximum(22050);
        o->step(10);
        o->value(6000);
        o->textsize(12);
        o->align(FL_ALIGN_TOP_LEFT);
      }
      o->end();
    }
    o->end();
  }
  return w;
}

Fl_Window* SMS_PeakContinuationSettings::BuildContents() {
  Fl_Window* w;
  { Fl_Window* o = mWindow = new Fl_Window(498, 362, "Peak Continuation Settings");
    w = o;
    o->user_data((void*)(this));
    { Fl_Counter* o = mMaxFreqDevFactor = new Fl_Counter(18, 35, 86, 25, "Maximum allowed frequency deviation:");
      o->labelsize(12);
      o->minimum(0);
      o->maximum(300);
      o->step(10);
      o->value(20);
      o->textsize(10);
      o->align(FL_ALIGN_TOP_LEFT);
    }
    { Fl_Box* o = mMaxFreqDecorator = new Fl_Box(106, 35, 30, 25, "%");
      o->labelsize(12);
      o->align(FL_ALIGN_LEFT|FL_ALIGN_INSIDE);
    }
    { Fl_Check_Button* o = mAssumeHarmonicity = new Fl_Check_Button(18, 75, 26, 25);
      o->down_box(FL_DOWN_BOX);
      o->labelsize(13);
    }
    { Fl_Box* o = mAssHarmDecorator = new Fl_Box(44, 75, 188, 25, "Assume input signal harmonicity");
      o->labelsize(12);
      o->align(FL_ALIGN_LEFT|FL_ALIGN_INSIDE);
    }
    { Fl_Check_Button* o = mActivateTrackCleaning = new Fl_Check_Button(18, 115, 25, 25);
      o->down_box(FL_DOWN_BOX);
      o->labelsize(13);
    }
    { Fl_Box* o = mActTrackCleanDecorator = new Fl_Box(43, 115, 218, 25, "Activate sinusoidal tracks pruning");
      o->labelsize(12);
      o->align(FL_ALIGN_LEFT|FL_ALIGN_INSIDE);
    }
    { Fl_Group* o = mTrackPruningGroup = new Fl_Group(6, 140, 488, 120);
      o->box(FL_ENGRAVED_FRAME);
      { Fl_Output* o = mExpectedFrames = new Fl_Output(21, 165, 124, 25, "Number of frames to be processed:");
        o->box(FL_NO_BOX);
        o->labelsize(12);
        o->textsize(12);
        o->align(FL_ALIGN_TOP_LEFT);
      }
      { Fl_Output* o = mFrameLen = new Fl_Output(256, 165, 74, 25, "Frame length:");
        o->box(FL_NO_BOX);
        o->labelsize(12);
        o->textsize(12);
        o->align(FL_ALIGN_TOP_LEFT);
      }
      { Fl_Box* o = mFrameLenDecorator = new Fl_Box(330, 165, 87, 25, "ms");
        o->labelsize(12);
        o->align(FL_ALIGN_LEFT|FL_ALIGN_INSIDE);
      }
      { Fl_Input* o = mToleranceToDiscont = new Fl_Input(23, 215, 73, 25, "Tolerance to track discontinuation:");
        o->labelsize(12);
        o->textsize(12);
        o->align(FL_ALIGN_TOP_LEFT);
      }
      { Fl_Box* o = mTTDDecorator = new Fl_Box(96, 215, 73, 25, "frames");
        o->labelsize(12);
        o->align(FL_ALIGN_LEFT|FL_ALIGN_INSIDE);
      }
      { Fl_Input* o = mMinTrackLen = new Fl_Input(252, 215, 72, 25, "Minimum track length:");
        o->labelsize(12);
        o->textsize(12);
        o->align(FL_ALIGN_TOP_LEFT);
      }
      o->end();
    }
    { Fl_Box* o = mMinTrackLenDecorator = new Fl_Box(330, 215, 73, 25, "frames");
      o->labelsize(12);
      o->align(FL_ALIGN_LEFT|FL_ALIGN_INSIDE);
    }
    o->end();
  }
  return w;
}
