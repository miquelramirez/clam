#!/usr/bin/python
import os
import glob
import sys

version='0.3'
options = Options('options.cache', ARGUMENTS)
options.Add(PathOption('install_prefix', 'The prefix where the annotator will be installed', ''))
options.Add(PathOption('clam_prefix', 'The prefix where CLAM was installed', ''))
options.Add(PathOption('clam_vmqt4_path', 'The path to the vmqt module', '')) # to be removed
options.Add(PathOption('clam_sconstools', 'The path to the scons tools provided by clam', ''))
options.Add(BoolOption('release', 'Build CLAM Annotator enabling compiler optimizations', 'no') )


def scanFiles(pattern, paths) :
	files = []
	for path in paths :
		files+=glob.glob(path+"/"+pattern)
	return files

def recursiveDirs(root) :
	return filter( (lambda a : a.rfind( "CVS")==-1 ),  [ a[0] for a in os.walk(root)]  )


env = Environment(ENV=os.environ, tools=['default'], options=options)
options.Save('options.cache', env)
Help(options.GenerateHelpText(env))

env.SConsignFile() # Single signature file

env.Tool('qt4', toolpath=[env['clam_sconstools']])
env.Tool('clam', toolpath=[env['clam_sconstools']])
env.Tool('nsis', toolpath=[env['clam_sconstools']])

CLAMInstallDir = env['clam_prefix']
CLAMVmQtPath = env['clam_vmqt4_path']

env['CXXFILESUFFIX'] = '.cxx'
env['QT4_UICDECLSUFFIX'] = '.hxx'
env['QT4_MOCHPREFIX'] = 'generated/moc_'
env['QT4_UICDECLPREFIX'] = 'generated/ui_'

env.EnableClamModules([
	'clam_core',
	'clam_audioio',
	'clam_processing',
	] , CLAMInstallDir)

env.EnableQt4Modules([
	'QtCore',
	'QtGui',
	'QtOpenGL',
#	'QtSvg',
#	'QtSql',
#	'QtNetwork',
#	'QtTest',
#	'QtXml',
#	'QtSvg',
#	'Qt3Support',
	])

mainSources = {
	'Annotator' : os.path.join('src','main.cxx'),
	'ClamExtractorExample' : os.path.join('src','ClamExtractorExample.cxx'),
}

sourcePaths = [
	'src',
	os.path.join('src','generated'),
]
extraPaths = []
extraPaths += recursiveDirs(CLAMVmQtPath+"/plot")
extraPaths += recursiveDirs(CLAMVmQtPath+"/render")
extraPaths += recursiveDirs(CLAMVmQtPath+"/data")
extraPaths += recursiveDirs(CLAMVmQtPath+"/util")
extraPaths += recursiveDirs(CLAMVmQtPath+"/player")
extraPaths += recursiveDirs(CLAMVmQtPath+"/misc")
extraPaths += recursiveDirs(CLAMVmQtPath+"/widget")
extraPaths += [
	CLAMInstallDir+'/include',
	CLAMInstallDir+'/include/CLAM', # KLUDGE to keep old style includes
#	'/usr/include/qt4/', # quick KLUDGE for ubuntu
]
includePaths = sourcePaths + extraPaths

sources = scanFiles('*.cxx', sourcePaths)
sources = filter( (lambda a : a.rfind( "moc_")==-1 ),  sources )
sources = filter( (lambda a : a.rfind( "qrc_")==-1 ),  sources )
sources = dict.fromkeys(sources).keys()
print sources, mainSources
for mainSource in mainSources.values() :
	sources.remove(mainSource)

qrcfiles = scanFiles("*.qrc", sourcePaths)
if qrcfiles : sources += env.Qrc(source=qrcfiles)

uifiles = scanFiles("*.ui", sourcePaths)
if uifiles: uiheaders = env.Uic4(source=uifiles)


env.Append(CPPPATH=includePaths)
env.Append(LIBPATH=CLAMVmQtPath)
env.Append(LIBS="clam_vmqt4")
env.Append(CPPFLAGS='-DRESOURCES_BASE="\\"' + env['install_prefix'] + '/share/annotator\\""')
env.Append(CPPFLAGS=['-DFFTW_HEADER="<rfftw.h>"'])

if sys.platform=='linux2' :
	if env['release'] :
		env.Append( CCFLAGS=['-g','-O3','-fomit-frame-pointer','-Wall'] )
	else :
		env.Append( CCFLAGS=['-g', '-Wall'] )
	#env.Append( LINKFLAGS=['-rdynamic'] ) # TODO: Is it needed?


programs = []
for main in mainSources.items() :
	programs += [ env.Program(target=main[0], source = sources+[main[1]]) ]

sounds = [
	'resources/sounds/click.wav'
	]
manpages = [
	'resources/man/man1/Annotator.1',
	'resources/man/man1/ClamExtractorExample.1',
	]

# Manual step: lupdate-qt4 *xx *ui -ts Annotator_ca.ts
tsfiles = scanFiles("i18n/*.ts", sourcePaths)
env.Precious(tsfiles) # TODO: this is not enough!! scan -c will delete ts files!!!
translatableSources = scanFiles('*.cxx', sourcePaths);
translatableSources+= scanFiles('*.hxx', sourcePaths);
translatableSources+= scanFiles('*.ui', sourcePaths);
translatableSources = filter( (lambda a : a.rfind( "generated/")==-1 ),  translatableSources )
translations = []
if len(tsfiles) : 
	tsNodes = env.Ts(target=tsfiles, source = translatableSources)
	translations = env.Qm(source = tsNodes)

installation = {
	'/bin' : programs,
	'/share/man/man1' : manpages,
	'/share/annotator/sounds': sounds,
	'/share/annotator/i18n': translations
}
installTargets = [
	env.Install( env['install_prefix']+path, files ) for path, files in installation.items() ]

if sys.platform=='win32' : 
	win_packages = [env.Nsis( source='scons\\clam_annotator.nsi')]
	env.Alias('package', win_packages)

env.Alias('install', installTargets )

env.Default(programs, translations)

