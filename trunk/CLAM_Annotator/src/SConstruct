#!/usr/bin/python
import os
import glob
import SCons.Util
from SCons.Util import CLVar

CLAMSandbox ='/home/vokimon/CajitasDeArena'
CLAMInstallDir = CLAMSandbox + '/CLAM-Install'


def scanFiles(pattern, paths) :
	files = []
	for path in paths :
		files+=glob.glob(path+"/"+pattern)
	return files

def recursiveDirs(root) :
	return filter( (lambda a : a.rfind( "CVS")==-1 ),  [ a[0] for a in os.walk(root)]  )


env = Environment(tools=['default','qt'])
env['CXXFILESUFFIX'] = '.cxx'
env['QT_MOC'] = 'moc-qt4'
env['QT4_MOC'] = 'moc-qt4'
env['QT4_UIC'] = 'uic-qt4'
env['QT_MOCHPREFIX'] = 'generated/moc_'
env['QT_UISUFFIX'] = '.ui'
env['QT_UICDECLPREFIX'] = 'generated/ui_'
env['QT_UICDECLSUFFIX'] = '.hxx'
env['QT_LIB'] = '' # KLUDGE to avoid linking qt3 library

env.Replace(QT_UIC='echo ***** Using old UIC!!!!!!')

# TODO: An emmiter is needed in order make the qrc depend on the actual
# files for the resources. If so, single_source is no more convenient
# and the Qrc must be called separatelly for each qrc file.
qrcbuilder = Builder(
	action ='rcc $SOURCE -o $TARGET',
	src_suffix = '.qrc',
	suffix = '.cxx',
	prefix = 'generated/qrc_',
	single_source = True
	)
env.Append( BUILDERS = { 'Qrc': qrcbuilder } )

env['QT_UIC4COM'] = [
	CLVar('$QT4_UIC $QT_UICDECLFLAGS -o ${TARGETS[0]} $SOURCE'),
	]
uic4builder = Builder(
    action='$QT_UIC4COM',
	src_suffix='$QT_UISUFFIX',
	suffix='$QT_UICDECLSUFFIX',
	prefix='$QT_UICDECLPREFIX',
	single_source = True
	)
env.Append( BUILDERS = { 'Uic4': uic4builder } )

pkgconfigLibraries = [
	'clam_core',
	'clam_audioio',
	'clam_processing',
	'QtGui',
#	'QtSvg',
#	'QtSql',
#	'QtNetwork',
#	'QtTest',
#	'QtXml',
	'QtCore',
	'QtOpenGL',
#	'QtSvg',
	'Qt3Support',
]

sourcePaths = [
	'.',
	'common',
	'generated',
]
extraPaths = []
extraPaths += recursiveDirs(CLAMSandbox+"/CLAM-draft/vmqt/plot")
extraPaths += recursiveDirs(CLAMSandbox+"/CLAM-draft/vmqt/render")
extraPaths += recursiveDirs(CLAMSandbox+"/CLAM-draft/vmqt/data")
extraPaths += recursiveDirs(CLAMSandbox+"/CLAM-draft/vmqt/util")
extraPaths += recursiveDirs(CLAMSandbox+"/CLAM-draft/vmqt/player")
extraPaths += recursiveDirs(CLAMSandbox+"/CLAM-draft/vmqt/misc")
extraPaths += recursiveDirs(CLAMSandbox+"/CLAM-draft/vmqt/widget")
extraPaths += [
	CLAMInstallDir+'/include',
	CLAMInstallDir+'/include/CLAM', # KLUDGE to keep old style includes
	'/usr/include/qt4/QtCore', # quick KLUDGE for ubuntu
	'/usr/include/qt4/QtGui', # quick KLUDGE for ubuntu
	'/usr/include/qt4/QtOpenGl', # quick KLUDGE for ubuntu
	'/usr/include/qt4/Qt3Support', # quick KLUDGE for ubuntu
]
includePaths = sourcePaths + extraPaths

qrcfiles = scanFiles("*.qrc", sourcePaths)
uifiles = scanFiles("*.qt4.ui", sourcePaths)
if len(uifiles): uiheaders = env.Uic4(source=uifiles)
sources = scanFiles('*.cxx', sourcePaths)
sources = filter( (lambda a : a.rfind( "moc_")==-1 ),  sources )
sources = filter( (lambda a : a.rfind( "qrc_")==-1 ),  sources )
if len(qrcfiles) : sources += env.Qrc(source=qrcfiles)
sources = dict.fromkeys(sources).keys()
sources.remove('./main.cxx')
sources.remove('./Test.cxx')

env.Append(CPPPATH=includePaths)
env.Append(LIBPATH=CLAMSandbox+"/CLAM-draft/vmqt")
env.Append(LIBS="clam_vmqt4")
env.ParseConfig('PKG_CONFIG_PATH=%s/lib/pkgconfig pkg-config %s --libs --cflags'%
	(
		CLAMInstallDir,
		' '.join(pkgconfigLibraries)))
env.Append(CPPFLAGS=['-DQT3_SUPPORT'])
env.Append(CPPFLAGS=['-DFFTW_HEADER="<rfftw.h>"'])
env.Append(CPPFLAGS=['-DQT3_SUPPORT_WARNINGS'])
mainSources = {
	'Annotator-qt4' : './main.cxx',
	'ClamExtractorExample' : './Test.cxx',
}

programs = []
for main in mainSources.items() :
	programs += [ env.Program(target=main[0], source = sources+[main[1]]) ]

env.Default(programs)

