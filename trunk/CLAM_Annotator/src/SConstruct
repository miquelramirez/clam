#!/usr/bin/python
import os
import glob
import SCons.Util

version='0.3'
options = Options('options.cache', ARGUMENTS)
options.Add(PathOption('install_prefix', 'The prefix where the annotator will be installed', ''))
options.Add(PathOption('clam_prefix', 'The prefix where CLAM was installed', ''))
options.Add(PathOption('clam_vmqt4_path', 'The path to the vmqt module', '')) # to be removed
options.Add(BoolOption( 'release', 'Build CLAM Annotator enabling compiler optimizations', 'no') )


def scanFiles(pattern, paths) :
	files = []
	for path in paths :
		files+=glob.glob(path+"/"+pattern)
	return files

def recursiveDirs(root) :
	return filter( (lambda a : a.rfind( "CVS")==-1 ),  [ a[0] for a in os.walk(root)]  )


env = Environment(tools=['default','qt4','dmg','nsis'], toolpath=['sconstools'], options=options)
options.Save('options.cache', env)
Help(options.GenerateHelpText(env))

env.SConsignFile() # Single signature file

CLAMInstallDir = env['clam_prefix']
CLAMVmQtPath = env['clam_vmqt4_path']

env['CXXFILESUFFIX'] = '.cxx'
env['QT4_UICDECLSUFFIX'] = '.hxx'
env['QT4_MOCHPREFIX'] = 'generated/moc_'
env['QT4_UICDECLPREFIX'] = 'generated/ui_'

pkgconfigLibraries = [
	'clam_core',
	'clam_audioio',
	'clam_processing',
	'QtCore',
	'QtGui',
	'QtOpenGL',
#	'QtSvg',
#	'QtSql',
#	'QtNetwork',
#	'QtTest',
#	'QtXml',
#	'QtSvg',
#	'Qt3Support',
]

sourcePaths = [
	'.',
	'generated',
]
extraPaths = []
extraPaths += recursiveDirs(CLAMVmQtPath+"/plot")
extraPaths += recursiveDirs(CLAMVmQtPath+"/render")
extraPaths += recursiveDirs(CLAMVmQtPath+"/data")
extraPaths += recursiveDirs(CLAMVmQtPath+"/util")
extraPaths += recursiveDirs(CLAMVmQtPath+"/player")
extraPaths += recursiveDirs(CLAMVmQtPath+"/misc")
extraPaths += recursiveDirs(CLAMVmQtPath+"/widget")
extraPaths += [
	CLAMInstallDir+'/include',
	CLAMInstallDir+'/include/CLAM', # KLUDGE to keep old style includes
	'/usr/include/qt4/', # quick KLUDGE for ubuntu
	'/usr/include/qt4/QtCore', # quick KLUDGE for ubuntu
	'/usr/include/qt4/QtGui', # quick KLUDGE for ubuntu
	'/usr/include/qt4/QtOpenGl', # quick KLUDGE for ubuntu
]
includePaths = sourcePaths + extraPaths

qrcfiles = scanFiles("*.qrc", sourcePaths)
uifiles = scanFiles("*.ui", sourcePaths)
if len(uifiles): uiheaders = env.Uic4(source=uifiles)
sources = scanFiles('*.cxx', sourcePaths)
sources = filter( (lambda a : a.rfind( "moc_")==-1 ),  sources )
sources = filter( (lambda a : a.rfind( "qrc_")==-1 ),  sources )
if len(qrcfiles) : sources += env.Qrc(source=qrcfiles)
sources = dict.fromkeys(sources).keys()
sources.remove('./main.cxx')
sources.remove('./ClamExtractorExample.cxx')

env.Append(CPPPATH=includePaths)
env.Append(LIBPATH=CLAMVmQtPath)
env.Append(CPPFLAGS='-DRESOURCES_BASE="\\"' + env['install_prefix'] + '/share/annotator\\""')
env.Append(LIBS="clam_vmqt4")
env.ParseConfig('PKG_CONFIG_PATH=%s/lib/pkgconfig pkg-config %s --libs --cflags'%
	(
		CLAMInstallDir,
		' '.join(pkgconfigLibraries)) )
env.Append(CPPFLAGS=['-DFFTW_HEADER="<rfftw.h>"'])

if env['release'] :
	env.Append( CCFLAGS=['-g', '-O3','-fomit-frame-pointer','-Wall'] )
else :
	env.Append( CCFLAGS=['-g', '-Wall'] )
#env.Append( LINKFLAGS=['-rdynamic'] ) # TODO: Is it needed?

mainSources = {
	'Annotator' : './main.cxx',
	'ClamExtractorExample' : './ClamExtractorExample.cxx',
}

programs = []
for main in mainSources.items() :
	programs += [ env.Program(target=main[0], source = sources+[main[1]]) ]

sounds = [
	'../resources/sounds/click.wav'
	]
manpages = [
	'../resources/man/man1/Annotator.1',
	'../resources/man/man1/ClamExtractorExample.1',
	]

# Manual step: lupdate-qt4 *xx *ui -ts Annotator_ca.ts
tsfiles = scanFiles("i18n/*.ts", sourcePaths)
env.Precious(tsfiles)
translatableSources = scanFiles('*.cxx', sourcePaths);
translatableSources+= scanFiles('*.hxx', sourcePaths);
translatableSources+= scanFiles('*.ui', sourcePaths);
translatableSources = filter( (lambda a : a.rfind( "generated/")==-1 ),  translatableSources )
translations = []
if len(tsfiles) : 
	tsNodes = env.Ts(target=tsfiles, source = translatableSources)
	translations = env.Qm(source = tsNodes)

#env.AddPostAction( install_bin, 'chmod 755 $TARGET' ) # TODO: Look for a generic action
installation = {
	'/bin' : programs,
	'/share/man/man1' : manpages,
	'/share/annotator/sounds': sounds,
	'/share/annotator/i18n/': translations
}
installTargets = [
	env.Install( env['install_prefix']+path, files ) for path, files in installation.items() ]

env.Alias( 'install', installTargets )
env.Default(programs, translations)

