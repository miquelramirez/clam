#!/usr/bin/python
import os
import glob
import SCons.Util
from SCons.Util import CLVar

qt4ToolPath="../../CLAM/scons/sconstools"

options = Options('options.cache', ARGUMENTS)
options.Add(PathOption('clam_prefix', 'The prefix where CLAM was installed', ''))

def scanFiles(pattern, paths) :
	files = []
	for path in paths :
		files+=glob.glob(path+"/"+pattern)
	return files

def recursiveDirs(root) :
	return filter( (lambda a : a.rfind( "CVS")==-1 ),  [ a[0] for a in os.walk(root)]  )

def unique(list) :
	return dict.fromkeys(list).keys()

env = Environment(tools=['default','qt4'], toolpath=[qt4ToolPath], options=options)
options.Save('options.cache', env)
CLAMInstallDir = env['clam_prefix']

env.SConsignFile() # Single signature file

env['CXXFILESUFFIX'] = '.cxx'
env['QT4_MOCHPREFIX'] = 'generated/moc_'
env['QT4_UICDECLPREFIX'] = 'generated/ui_'
env['QT4_UICDECLSUFFIX'] = '.hxx'

pkgconfigLibraries = [
	'clam_core',
	'clam_audioio',
	'clam_processing',
	'QtGui',
#	'QtSql',
#	'QtNetwork',
#	'QtTest',
#	'QtXml',
	'QtCore',
	'QtOpenGL',
#	'QtSvg',
	'Qt3Support',
]

libSourcePaths = []
libSourcePaths += recursiveDirs("plot")
libSourcePaths += recursiveDirs("render")
libSourcePaths += recursiveDirs("data")
libSourcePaths += recursiveDirs("util")
libSourcePaths += recursiveDirs("player")
libSourcePaths += recursiveDirs("misc")
libSourcePaths += recursiveDirs("widget")
extraPaths = []
extraPaths += recursiveDirs("examples/utils")
extraPaths += [
	CLAMInstallDir+'/include',
	CLAMInstallDir+'/include/CLAM', # KLUDGE to keep old style includes	
]
includePaths = libSourcePaths + extraPaths

qrcfiles = scanFiles("*.qrc", libSourcePaths)
uifiles = scanFiles("*.qt4.ui", libSourcePaths)
if len(uifiles): uiheaders = env.Uic4(source=uifiles)
sources = scanFiles('*.cxx', libSourcePaths)
sources += filter( (lambda a : a.rfind( "moc_")==-1 ),  sources )
sources += filter( (lambda a : a.rfind( "qrc_")==-1 ),  sources )
if len(qrcfiles) : sources += env.Qrc(source=qrcfiles)
sources = unique(sources)

printableSources = [os.path.basename(source) for source in sources ]
printableSources.sort()
print printableSources

env.Append(CPPPATH=includePaths)
env.ParseConfig('PKG_CONFIG_PATH=%s/lib/pkgconfig pkg-config %s --libs --cflags'%
	(
		CLAMInstallDir,
		' '.join(pkgconfigLibraries)))
#env.Append(CPPFLAGS=['-DQT3_SUPPORT'])
env.Append(CPPFLAGS=['-DFFTW_HEADER="<rfftw.h>"'])
#env.Append(CPPFLAGS=['-DQT3_SUPPORT_WARNINGS'])
examplesMainSources = [
	"examples/src/audio_plot_example.cxx",
	"examples/src/fundamental_plot_example.cxx",
	"examples/src/segmentation_plot_example.cxx",
	"examples/src/sintracks_plot_example.cxx",
	"examples/src/spectrum_plot_example.cxx",
	"examples/src/spectrogram_plot_example.cxx",
	"examples/src/audio_stereo_plot_example.cxx",
	"examples/src/bpf_plot_example.cxx",
	"examples/src/multibpf_plot_example.cxx",
	"examples/src/playable_audio_plot_example.cxx",
	"examples/src/playable_audio_stereo_plot_example.cxx",
	"examples/src/playable_bpf_plot_example.cxx",
	"examples/src/playable_fundamental_plot_example.cxx",
	"examples/src/playable_multibpf_plot_example.cxx",
]

exampleSources = scanFiles('*.cxx', ['examples/utils'])

staticLibrary = env.StaticLibrary(target='clam_vmqt4', source=sources)
env.Append(LIBPATH='.')
env.Append(LIBS='clam_vmqt4')
examples = []
for main in examplesMainSources :
	executable = 'examples/'+os.path.splitext(os.path.basename(main))[0]
	examples += [ env.Program(target=executable, source = exampleSources + [main] ) ]

env.Alias('examples',examples)

env.Default(staticLibrary)



