#!/usr/bin/python
import os
import sys
import glob

options = Variables('options.cache', ARGUMENTS)

toolChain = 'default' if sys.platform is not 'win32' else 'mingw'
env = Environment(ENV=os.environ, tools=[toolChain], options=options)
options.Save('options.cache', env)
Help(options.GenerateHelpText(env))
env.SConsignFile() # Single signature file

env.ParseConfig('python-config --cflags')
env.ParseConfig('python-config --libs')
env.ParseConfig('pkg-config clam_core clam_processing clam_audioio --cflags --libs')
env.ParseConfig('pkg-config clam_qtmonitors QtUiTools QtGui QtCore --cflags --libs') # UI binding
env.ParseConfig('pkg-config --cflags --libs pyside')

env.AppendUnique(
	LIBS=['boost_python']
)

env["SHOBJPREFIX"] = "generated/"

# python-config adds a flag that is refused by g++
if '-Wstrict-prototypes' in env['CCFLAGS'] :
	env['CCFLAGS'].remove('-Wstrict-prototypes')

clamengine_module = env.SharedLibrary (
	target='ipyclam/Clam_NetworkProxy',
	source=[
		'Clam_NetworkProxy.cxx',
		'shibokenunwrap.cxx',
		'sipunwrap.cxx',
		],
	SHLIBPREFIX='',
)

clamengine_config_module = env.SharedLibrary (
	target='ipyclam/Clam_ConfigurationProxy',
	source=[
		'Clam_ConfigurationProxy.cxx',
		'ConfigurationProxy.cxx',
		],
	SHLIBPREFIX='',
)

dummyProcessingsModule = env.SharedLibrary (
	target='ipyclam/DummyProcessings',
	source=[
		'DummyProcessings.cxx',
		],
	SHLIBPREFIX='',
)

ui_pyside_module = env.SharedLibrary (
	target='ipyclam/ui/PySide',
	source=[
		'PySideModule.cxx',
		'shibokenunwrap.cxx',
		],
	SHLIBPREFIX='',
)

ui_pyqt4_module = env.SharedLibrary (
	target='ipyclam/ui/PyQt4',
	source=[
		'PyQt4Module.cxx',
		'sipunwrap.cxx',
		],
	SHLIBPREFIX='',
)

program = env.Program(
	target='ipyclam_console',
	source='ipyclam_console.cxx',
)
blacklist = [
	"ipyclam/ProxyAPI.py",
]

python_modules = [
	source for source in  glob.glob('ipyclam/*.py')
	if source not in blacklist
	and "Test" not in source
	]

# TODO: Use distutils to get the paths given a prefix or a home schema
prefix = os.path.expanduser('~/local')
mod_dir = os.path.join(prefix, 'lib', 'python', 'ipyclam')
lib_dir = os.path.join(prefix, 'lib', 'python', 'ipyclam')
uilib_dir = os.path.join(lib_dir, 'ui')
bin_dir = os.path.join(prefix, 'bin')

install = [
	env.Install(targetDir, files) for targetDir, files in [
	( lib_dir,[
		clamengine_module,
		clamengine_config_module,
		python_modules,
	]),
	( uilib_dir, [
		ui_pyside_module,
		ui_pyqt4_module,
		'ipyclam/ui/__init__.py',
	]),
	( bin_dir,[
		program,
		"ipyclam_console",
		"ipyclam_qtconsole",
	]),
]]

env.Alias('install', install)

Default(
	clamengine_module,
	clamengine_config_module,
	dummyProcessingsModule,
	ui_pyside_module,
	ui_pyqt4_module,
	program,
)

