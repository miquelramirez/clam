- Dummy Network:
[X]	- processingsName -> processingNames
	- Dummy: tests for ProcessingWithConfig
	- _dummyPrototypes: when two or more processings of the same type are added, changes to one affect the others


- Polishing connector interface:
	- Dummy_NetworkProxy.connectorInfo failure case (assert? exception?)
[X]	- Index and type should be queried to the proxy instead of passed as constructor parameters and stored as attribute. 
		For tests using constructor parameters instead of a definition structure we can keep these attributes, query the proxy just when they are None
	- If we have properties, do we need a dicctionary to hold Connector attributes?
	- PeerConnectors.__len__()
	- Rework proxy interface and external objects constructors so that parameters are specified in order of search
		(proxy,processingname,kind,direction,connectorname...)

- Network interface:
	- Given a dummy defined network net=Network(dummyProxy)
[X]		- Getting a processing with net.procesingName
[X]		- Getting a processing with net["processingName"]
[X]		- Failure case on net.missingProcessingName 
[X]		- Failure case on net["missingProcessingName"]
[X]		- Exploring the processings in a network with net.[tab] (__dir__)
[X]		- In parallel defining and refactor dummy proxy interface for processing enumeration
	- Creating processings
[X]		- Processing factories for the dummy proxy
[X]		- Adding a processing
[X]			- 1 x Network.addProcessing -> code
[X]			- 2 x Network.addProcessing -> code (same type)
[X]			- 2 x Network.addProcessing (different type) -> code
	- Self generation code (network is able to generate python code to generate itself again)
		- Useful for quick checking the network status
[X]		- Self writting code for processings
[X]		- Self writting code for connections
		- Self writting code for configurations
	- Pending test cases
		- network.code = "Type", should fail (and any existing network method)
		- network.code() should use the [] notation to create a processing if its name is not a symbol or is an attribute
	- Additional features
[X]		- dir(network.types) should give all the available types as symbols
[X]		- network.types.MinimalProcessing should return "MinimalProcessing"
[X]		- network.types.NonExistingType should raise AttributeError

- Connecting
	- Test Connector.connect(Connector)
[X]		increments the peers
[X]		increments the peer peers
		many kinds:
[X]			output first
[X]			input first
[X]			controls
[X]			ports
		error conditions
[X]			different kind
[X]			same direction
[X]			different type
	- Test Connectors.connect(Connector)
		multiple to one connection
	- Test Connectors.connect(Processing)
		connects all feasible in same order
		must define exact behaviour
[X]	- Test > and < operators to connect
