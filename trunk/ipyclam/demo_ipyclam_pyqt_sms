#!/usr/bin/python

from PyQt4 import QtGui, QtCore
from PyQt4 import uic
import sys
import ipyclam

class ipyclam_controller(QtGui.QWidget):
	def __init__(self):
		super(ipyclam_controller, self).__init__()
		self.createNetwork()

		self.grid = QtGui.QGridLayout()
		self.setLayout(self.grid)
		button = QtGui.QPushButton("Play")
		self.connect(button, QtCore.SIGNAL('clicked()'), self.play)
		self.grid.addWidget(button, 0, 0)

		button = QtGui.QPushButton("Pause")
		self.connect(button, QtCore.SIGNAL('clicked()'), self.pause)
		self.grid.addWidget(button, 0, 1)

		button = QtGui.QPushButton("Stop")
		self.connect(button, QtCore.SIGNAL('clicked()'), self.stop)
		self.grid.addWidget(button, 0, 2)

		button = QtGui.QPushButton("Code")
		self.connect(button, QtCore.SIGNAL('clicked()'), self.showCode)
		self.grid.addWidget(button, 1, 0)

		self.box = QtGui.QComboBox()
		processingsList = dir(self._network)
		processingsList.remove("description")
		self.box.addItems(processingsList)
		self.connect(self.box, QtCore.SIGNAL('activated(int)'), self.setConfigProperty)
		self.grid.addWidget(self.box, 1, 0)

		self.configButton = QtGui.QPushButton("Configure")
		self.configButton.setProperty("clamConfiguration", self.box.currentText())
		self.grid.addWidget(self.configButton, 1, 2)

		self.ui = self._network.loadUi("SMSTransposition.ui")
		self.setMinimumWidth(600)
		self.setMinimumHeight(600)
		self.grid.addWidget(self.ui, 2, 0, 10, 3)

		self._network.bindUi(self)

	def createNetwork(self):
		self._network = ipyclam.Network( ipyclam.Clam_NetworkProxy() )
		self._network.backend = "JACK"
		self._network.Input = 'AudioSource'
		self._network.SMSAnalysisCore = 'SMSAnalysisCore'
		self._network["SMSSynthesis_0"] = 'SMSSynthesis'
		self._network["SMSSynthesis_1"] = 'SMSSynthesis'
		self._network["SMSTranspose_0"] = 'SMSTranspose'
		self._network["SMSTranspose_1"] = 'SMSTranspose'
		self._network["Transpose amount"] = 'OutControlSender'
		self._network["Transpose amount_0"] = 'OutControlSender'
		self._network["Transposed_0"] = 'AudioSink'
		self._network["Transposed_1"] = 'AudioSink'
		self._network["Transpose amount"]['Min'] = -36.0
		self._network["Transpose amount"]['Max'] = 36.0
		self._network["Transpose amount"]['Step'] = 0.360000014305
		self._network["Transpose amount_0"]['Min'] = -36.0
		self._network["Transpose amount_0"]['Max'] = 36.0
		self._network["Transpose amount_0"]['Step'] = 0.360000014305
		self._network.Input["1"] > self._network.SMSAnalysisCore["Input Audio"]
		self._network.SMSAnalysisCore["Sinusoidal Peaks"] > self._network["SMSTranspose_0"]["In SpectralPeaks"]
		self._network.SMSAnalysisCore["Sinusoidal Peaks"] > self._network["SMSTranspose_1"]["In SpectralPeaks"]
		self._network.SMSAnalysisCore["Residual Spectrum"] > self._network["SMSSynthesis_0"].InputResSpectrum
		self._network.SMSAnalysisCore["Residual Spectrum"] > self._network["SMSSynthesis_1"].InputResSpectrum
		self._network["SMSSynthesis_0"].OutputAudio > self._network["Transposed_0"]["1"]
		self._network["SMSSynthesis_1"].OutputAudio > self._network["Transposed_1"]["1"]
		self._network["SMSTranspose_0"]["Out SpectralPeaks"] > self._network["SMSSynthesis_0"].InputSinPeaks
		self._network["SMSTranspose_1"]["Out SpectralPeaks"] > self._network["SMSSynthesis_1"].InputSinPeaks
		self._network["Transpose amount"].out > self._network["SMSTranspose_0"]["Transpose amount"]
		self._network["Transpose amount_0"].out > self._network["SMSTranspose_1"]["Transpose amount"]

	def showCode(self):
		QtGui.QMessageBox.about(self, "Code to build the network", self._network.code())

	def play(self):
		self._network.play()
		print 'Playing...'

	def pause(self):
		self._network.pause()
		print 'Paused'

	def stop(self):
		self._network.stop()
		print 'Stopped'

	def setConfigProperty(self):
		self.configButton = QtGui.QPushButton("Configure")
		self.configButton.setProperty("clamConfiguration", self.box.currentText())
		self.grid.addWidget(self.configButton, 1, 2)
		self._network.bindUi(self.configButton)

if __name__ == "__main__" :
	app = QtGui.QApplication(sys.argv)
	w = ipyclam_controller()
	w.show()
	app.exec_()
